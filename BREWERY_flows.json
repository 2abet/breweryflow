[
    {
        "id": "3f9690b109254d7a",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 1380,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "5922f9d0f57367e1",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Insert into a table",
        "info": "",
        "x": 1380,
        "y": 1300,
        "wires": []
    },
    {
        "id": "b1ca9531ed7d2719",
        "type": "function",
        "z": "442506512849cb45",
        "name": "F insert a ROW",
        "func": "\n// Variables for the 'BOIL' station to be \n// used throughout the flow\n\nvar valuef = flow.get('bvaluef') || 0;\nvar lossf = flow.get('blossf') || 0;\nvar valuexx = flow.get('bvaluexx') || 0;\n\nlet payloadin = valuexx\nlet station = \"BOIL\"\n\nlet payloadout = `INSERT INTO  IUGRED_17.brewtrans VALUES(current_date, current_time, '${station}', ${payloadin});`\n\n\nmsg.payload = payloadout\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1360,
        "wires": [
            [
                "3f9690b109254d7a",
                "5e91d5e63e65eea0"
            ]
        ]
    },
    {
        "id": "5e91d5e63e65eea0",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Report to table on UI",
        "func": "\nlet limit = msg.limit\n\nlet payloadout = `(select * from IUGRED_17.Brewtrans where process_name = 'BOIL'\nORDER BY last_update DESC, registered_at DESC limit ${limit}) \nORDER BY last_update ASC, registered_at ASC;` \n\n\nmsg.payload = payloadout\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1440,
        "wires": [
            [
                "fcfb83964b8efc94"
            ]
        ]
    },
    {
        "id": "9f40d4e22bc4a849",
        "type": "ui_table",
        "z": "442506512849cb45",
        "group": "3e86821e0e02d9da",
        "name": "Brew flow log",
        "order": 5,
        "width": 8,
        "height": 7,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1770,
        "y": 1440,
        "wires": []
    },
    {
        "id": "0f3e114db69cb13b",
        "type": "gate",
        "z": "442506512849cb45",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 610,
        "y": 1360,
        "wires": [
            [
                "c95f8bee66523c38"
            ]
        ]
    },
    {
        "id": "d16eb521ce6c46f3",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "Close Gate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "value",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "close",
        "payloadType": "str",
        "x": 380,
        "y": 1360,
        "wires": [
            [
                "0f3e114db69cb13b"
            ]
        ]
    },
    {
        "id": "98894b0ac5be96d2",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "Open Gate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "value",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "open",
        "payloadType": "str",
        "x": 380,
        "y": 1280,
        "wires": [
            [
                "0f3e114db69cb13b"
            ]
        ]
    },
    {
        "id": "fcfb83964b8efc94",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 1580,
        "y": 1440,
        "wires": [
            [
                "9f40d4e22bc4a849",
                "088c8a9c4c3982fd",
                "d9bff8f7de6840a3",
                "a413f873b7ef43c7"
            ]
        ]
    },
    {
        "id": "09427bd086901fc6",
        "type": "ui_gauge",
        "z": "442506512849cb45",
        "name": "Brew Temperature",
        "group": "3e86821e0e02d9da",
        "order": 2,
        "width": 8,
        "height": 9,
        "gtype": "gage",
        "title": "Brew Temperature",
        "label": "units",
        "format": "{{temp}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "45",
        "seg2": "85",
        "diff": false,
        "className": "",
        "x": 1390,
        "y": 1520,
        "wires": []
    },
    {
        "id": "4b460cd487da640c",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Select last 'x' rows for UI Table",
        "info": "",
        "x": 1420,
        "y": 1400,
        "wires": []
    },
    {
        "id": "4b27debde1075544",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Maintain Gauge",
        "info": "",
        "x": 1380,
        "y": 1480,
        "wires": []
    },
    {
        "id": "79f90bab8fec3ce5",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Heat Loss",
        "func": "\n// Variables for the 'BOIL' station to be \n// used throughout the flow\n\nvar valuef = flow.get('bvaluef') || 0;\nvar lossf = flow.get('blossf') || 0;\nvar valuexx = flow.get('bvaluexx') || 0;\n\nconst bal = valuexx - lossf\n\nflow.set('bvaluexx', bal)\n\nflow.set('testvaluexx', bal)\n\nlet gauge = bal * 1\n\nmsg.temp = bal\nmsg.payload = bal\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1360,
        "wires": [
            [
                "b1ca9531ed7d2719",
                "b3bf78e7f69ab2ae",
                "09427bd086901fc6",
                "55493be88e4b8ab2",
                "fb7c78ea78dc6ad9",
                "44af189396460c2f"
            ]
        ]
    },
    {
        "id": "b3bf78e7f69ab2ae",
        "type": "delay",
        "z": "442506512849cb45",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 1440,
        "wires": [
            [
                "0f3e114db69cb13b"
            ]
        ]
    },
    {
        "id": "1e4f629dbbf73ba7",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "The Process - BOIL",
        "info": "",
        "x": 870,
        "y": 1320,
        "wires": []
    },
    {
        "id": "c95f8bee66523c38",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Therms in",
        "func": "\n// Variables for the 'BOIL' station to be \n// used throughout the flow\n\nvar valuef = flow.get('bvaluef') || 0;\nvar lossf = flow.get('blossf') || 0;\nvar valuexx = flow.get('bvaluexx') || 0;\nvar adjust = global.get('adjust') || 0;\n\nlet bal = valuexx + valuef + adjust\n\nflow.set('bvaluexx', bal)\n\nmsg.temp = bal\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1360,
        "wires": [
            [
                "79f90bab8fec3ce5"
            ]
        ]
    },
    {
        "id": "bf37ee5a8b737053",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 380,
        "y": 360,
        "wires": [
            [
                "e061acb37500b76c",
                "51159dc9a629dcf0"
            ]
        ]
    },
    {
        "id": "19d4ad309754d27f",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Pick up Cases Demand",
        "func": "\n// Define the variables for the 'BOIL' station to be \n// used throughout the flow.  Set to start values.\n\nvar valuef = flow.get('valuef') || 0;\nvar lossf = flow.get('lossf') || 0;\nvar valuexx = flow.get('valuexx') || 0;\n\nflow.set('valuef', 0)\nflow.set('lossf', 0)\nflow.set('valuexx', 60)\n\nlet payloadout = `(select * from IUGRED_17.Brewctl where PROCESS_NAME = 'CASES');`\n\nmsg.payload = payloadout\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 360,
        "wires": [
            [
                "bf37ee5a8b737053"
            ]
        ]
    },
    {
        "id": "4e87e6d97bebf46f",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "START",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload2",
                "v": "0",
                "vt": "str"
            },
            {
                "p": "limit",
                "v": "10",
                "vt": "num"
            },
            {
                "p": "value",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "temp",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 560,
        "wires": [
            [
                "19d4ad309754d27f",
                "368c1b5fbdffc71e"
            ]
        ]
    },
    {
        "id": "e061acb37500b76c",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Get file values",
        "func": "\n// Variables for the 'BOIL' station to be \n// used throughout the flow\n\nvar valuef = flow.get('valuef') || 0;\nvar lossf = flow.get('lossf') || 0;\nvar valuexx = flow.get('valuexx') || 0;\n\nflow.set('valuef', 0)\nflow.set('lossf', 0)\nflow.set('valuexx', 60)\n\nlet payload = msg.payload\nlet station = payload\nlet workcases = 0\n\n\n    workcases = station[0].PROCESS_LOSSES\n    \n    \n\nconst wkcases = parseInt(workcases)\n   \nlet outboil = 3 * wkcases\nlet outwater = 10 * wkcases\n\n\nmsg.payload = `update IUGRED_17.brewctl set PROCESS_LOSSES = ${outboil} where PROCESS_NAME = 'BOIL' `\nmsg.payload2 = `update IUGRED_17.brewctl set PROCESS_LOSSES = ${outwater} where PROCESS_NAME = 'WATER' `\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "7f026ec2a2ba9a0c",
                "60954c78d9132c22"
            ]
        ]
    },
    {
        "id": "7f026ec2a2ba9a0c",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 720,
        "y": 360,
        "wires": [
            [
                "422832de789f2dd5"
            ]
        ]
    },
    {
        "id": "60954c78d9132c22",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Get file values",
        "func": "msg.payload = msg.payload2\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "ad114997c0ca7223",
                "0708cb0a120a7fe5",
                "5d5dfefc284fd1cc",
                "39c3c6315b66567d"
            ]
        ]
    },
    {
        "id": "ad114997c0ca7223",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 720,
        "y": 420,
        "wires": [
            [
                "495481dad7bc643b"
            ]
        ]
    },
    {
        "id": "23322823d6dec2eb",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Set Production Starting Values - Based on production qty entered above.",
        "info": "",
        "x": 330,
        "y": 320,
        "wires": []
    },
    {
        "id": "76718304e32706ac",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "BOIL Station",
        "info": "",
        "x": 130,
        "y": 1220,
        "wires": []
    },
    {
        "id": "4f6d60d43db4a9ed",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Maintain Log",
        "info": "",
        "x": 1770,
        "y": 1400,
        "wires": []
    },
    {
        "id": "3d8494ee36ea2b0b",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 1440,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "5e39ae647b25c17e",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Insert into a table",
        "info": "",
        "x": 1460,
        "y": 920,
        "wires": []
    },
    {
        "id": "5bc5b89b9a0abc59",
        "type": "function",
        "z": "442506512849cb45",
        "name": "F insert a ROW",
        "func": "\n// Variables for the 'WATER' station to be \n// used throughout the flow\n\nvar valuef = flow.get('wvaluef') || 0;\nvar lossf = flow.get('wlossf') || 0;\nvar valuexx = flow.get('wvaluexx') || 0;\n\nlet payloadin = valuexx\nlet station = \"WATER\"\n\nlet payloadout = `INSERT INTO  IUGRED_17.brewtrans VALUES(current_date, current_time, '${station}', ${payloadin});`\n\nmsg.payload = payloadout\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 980,
        "wires": [
            [
                "3d8494ee36ea2b0b",
                "ca68cbe260afb27c"
            ]
        ]
    },
    {
        "id": "ca68cbe260afb27c",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Report to table on UI",
        "func": "\nlet limit = \"0\"\n\nlimit = msg.limit\n\n\nlet payloadout = `(select * from IUGRED_17.Brewtrans where process_name = 'WATER'\nORDER BY last_update DESC, registered_at DESC limit ${limit}) \nORDER BY last_update ASC, registered_at ASC;` \n \nmsg.payload = payloadout\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1060,
        "wires": [
            [
                "a132ccf186d3ac20"
            ]
        ]
    },
    {
        "id": "de442e4cedb6e2af",
        "type": "ui_table",
        "z": "442506512849cb45",
        "group": "e207eea38c442aee",
        "name": "Brew water log",
        "order": 5,
        "width": 8,
        "height": 7,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1840,
        "y": 1060,
        "wires": []
    },
    {
        "id": "39eec93ab8b1d8a0",
        "type": "gate",
        "z": "442506512849cb45",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 590,
        "y": 980,
        "wires": [
            [
                "9f814e9730ea3b37"
            ]
        ]
    },
    {
        "id": "0afc6fcb10557641",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "Close Gate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "value",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "close",
        "payloadType": "str",
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "39eec93ab8b1d8a0"
            ]
        ]
    },
    {
        "id": "01027647e10e20a2",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "Open Gate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "value",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "open",
        "payloadType": "str",
        "x": 380,
        "y": 940,
        "wires": [
            [
                "39eec93ab8b1d8a0"
            ]
        ]
    },
    {
        "id": "a132ccf186d3ac20",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 1640,
        "y": 1060,
        "wires": [
            [
                "de442e4cedb6e2af",
                "1894870b5529503d"
            ]
        ]
    },
    {
        "id": "38dffd215a802267",
        "type": "ui_gauge",
        "z": "442506512849cb45",
        "name": "Brew Water",
        "group": "e207eea38c442aee",
        "order": 2,
        "width": 8,
        "height": 9,
        "gtype": "wave",
        "title": "Brew Water",
        "label": "Litres",
        "format": "{{value | number}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "45",
        "seg2": "85",
        "diff": false,
        "className": "",
        "x": 1410,
        "y": 1160,
        "wires": []
    },
    {
        "id": "3aee73479e8e9cbd",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Select last 'x' rows for UI Table",
        "info": "",
        "x": 1460,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3ba1ef544bd27d1c",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Maintain Gauge",
        "info": "",
        "x": 1420,
        "y": 1120,
        "wires": []
    },
    {
        "id": "59e32bcaa76f87af",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Water Consumed",
        "func": "\n// Variables for the 'WATER' station to be \n// used throughout the flow\n\nvar valuef = flow.get('wvaluef') || 0;\nvar lossf = flow.get('wlossf') || 0;\nvar valuexx = flow.get('wvaluexx') || 0;\nvar vsafety = flow.get('bvaluexx') || 0;\nvar testvalue = flow.get('testvaluexx') || 0;\n\n//Set min water level\nlet bal = 80\n\n// Boiler Blow Control\nif (testvalue >= 80 && testvalue <= 90) {\n\nbal = valuexx - lossf\n\nflow.set('wvaluexx', bal)\n\n}\n\nmsg.value = bal\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 980,
        "wires": [
            [
                "5bc5b89b9a0abc59",
                "38dffd215a802267",
                "5343d053bf5d16c5",
                "25e29f4f94754953",
                "b974e6973294009d"
            ]
        ]
    },
    {
        "id": "5343d053bf5d16c5",
        "type": "delay",
        "z": "442506512849cb45",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 1100,
        "wires": [
            [
                "39eec93ab8b1d8a0"
            ]
        ]
    },
    {
        "id": "9f814e9730ea3b37",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Water Fill",
        "func": "\n// Variables for the 'WATER' station to be \n// used throughout the flow\n\nvar valuef = flow.get('wvaluef') || 0;\nvar lossf = flow.get('wlossf') || 0;\nvar valuexx = flow.get('wvaluexx') || 80;\nvar vsafety = flow.get('bvaluexx') || 0;\n\n// Boiler Blow Control\n\nif (vsafety >= 80  && vsafety <= 90) {\n   \n\nlet bal = valuexx + valuef\n\nflow.set('wvaluexx', bal)\n\n} \n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 980,
        "wires": [
            [
                "59e32bcaa76f87af"
            ]
        ]
    },
    {
        "id": "0f9d9852668dde15",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 780,
        "y": 840,
        "wires": [
            [
                "012bf521ea7eb362"
            ]
        ]
    },
    {
        "id": "0708cb0a120a7fe5",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Set SQL for WATER",
        "func": "\n// Define the variables for the 'WATER' station to be \n// used throughout the flow.  Set the start values\n\nvar valuef = flow.get('wvaluef') || 0;\nvar lossf = flow.get('wlossf') || 0;\nvar valuexx = flow.get('wvaluexx') || 80;\n\nflow.set('wvaluef', 0)\nflow.set('wlossf', 0)\nflow.set('wvaluexx', 80)\n\nlet payloadout = `(select * from IUGRED_17.Brewctl where PROCESS_NAME = 'WATER'\n);`\n\nmsg.payload = payloadout\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 840,
        "wires": [
            [
                "0f9d9852668dde15"
            ]
        ]
    },
    {
        "id": "64100d72c67932c2",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "WATER Starting Values - From table as set by production qty",
        "info": "",
        "x": 920,
        "y": 780,
        "wires": []
    },
    {
        "id": "461c44e5ce81bf9f",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Water Station",
        "info": "# WATER",
        "x": 110,
        "y": 780,
        "wires": []
    },
    {
        "id": "551e5c1ed876cdb1",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Maintain Log",
        "info": "",
        "x": 1830,
        "y": 1000,
        "wires": []
    },
    {
        "id": "012bf521ea7eb362",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Set Start values for WATER",
        "func": "\n// Variables for the 'WATER' station to be \n// used throughout the flow\n\nvar valuef = flow.get('wvaluef') || 0;\nvar lossf = flow.get('wlossf') || 0;\nvar valuexx = flow.get('wvaluexx') || 80;\n\nlet payload = msg.payload\nlet workwaterin = payload[0].PROCESS_INPUT;\nlet workwaterloss = payload[0].PROCESS_LOSSES;\n\nconst wkwaterin = parseInt(workwaterin) \nconst wkwaterloss = parseInt(workwaterloss) \n\nflow.set('wvaluef', wkwaterin)\nflow.set('wlossf', wkwaterloss)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 840,
        "wires": [
            [
                "39eec93ab8b1d8a0"
            ]
        ]
    },
    {
        "id": "e2fe70a8e385018c",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 1600,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "affa7bbc293c6f3c",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Insert into a table",
        "info": "",
        "x": 1380,
        "y": 2040,
        "wires": []
    },
    {
        "id": "33f8b4e74f48a74c",
        "type": "function",
        "z": "442506512849cb45",
        "name": "F insert a ROW",
        "func": "\n// Variables for the 'CASES' station to be \n// used throughout the flow\n\nvar valuef = flow.get('cvaluef') || 0;\nvar lossf = flow.get('clossf') || 0;\nvar valuexx = flow.get('cvaluexx') || 0;\n\nlet payloadin = valuexx\nlet station = \"CASES\"\n\nlet payloadout = `INSERT INTO  IUGRED_17.brewtrans VALUES(current_date, current_time, '${station}', ${payloadin});`\n\nmsg.payload = payloadout\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2100,
        "wires": [
            [
                "e2fe70a8e385018c",
                "526a189b6ffcc3cc"
            ]
        ]
    },
    {
        "id": "526a189b6ffcc3cc",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Report to table on UI",
        "func": "\nlet limit = \"0\"\n\nlimit = msg.limit\n\n\nlet payloadout = `(select * from IUGRED_17.Brewtrans where process_name = 'CASES'\nORDER BY last_update DESC, registered_at DESC limit ${limit}) \nORDER BY last_update ASC, registered_at ASC;` \n \nmsg.payload = payloadout\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 2180,
        "wires": [
            [
                "1de82a548056144b"
            ]
        ]
    },
    {
        "id": "7594248f5272be6e",
        "type": "ui_table",
        "z": "442506512849cb45",
        "group": "3a71324c40ab6674",
        "name": "Cases and Bottles out",
        "order": 11,
        "width": 8,
        "height": 6,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 2000,
        "y": 2180,
        "wires": []
    },
    {
        "id": "6bb1741029a988dd",
        "type": "gate",
        "z": "442506512849cb45",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 2100,
        "wires": [
            [
                "5d0adcce0b6644aa"
            ]
        ]
    },
    {
        "id": "e65eadbc28765efa",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "Close Gate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "value",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "close",
        "payloadType": "str",
        "x": 440,
        "y": 2120,
        "wires": [
            [
                "6bb1741029a988dd"
            ]
        ]
    },
    {
        "id": "5449b46f2c08f51d",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "Open Gate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "value",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "open",
        "payloadType": "str",
        "x": 440,
        "y": 2060,
        "wires": [
            [
                "6bb1741029a988dd"
            ]
        ]
    },
    {
        "id": "1de82a548056144b",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 1760,
        "y": 2180,
        "wires": [
            [
                "7594248f5272be6e",
                "6fc2814eda690c05"
            ]
        ]
    },
    {
        "id": "5793b417b06c690b",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Select last 'x' rows for UI Table",
        "info": "",
        "x": 1820,
        "y": 2140,
        "wires": []
    },
    {
        "id": "1ce742b4c6ea2bd1",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Maintain Gauge and graph",
        "info": "",
        "x": 1470,
        "y": 2240,
        "wires": []
    },
    {
        "id": "b1679135d3806e6b",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Beer Out (Case = 10 botles)",
        "func": "\n// Variables for the 'Case' station to be \n// used throughout the flow\nmsg.payload2 = flow.get('bvaluexx')\n\nvar valuef = flow.get('cvaluef') || 0;\nvar lossf = flow.get('clossf') || 0;\nvar valuexx = flow.get('cvaluexx') || 0;\nvar crateload = flow.get('crateload') || 0;\nvar vsafety = flow.get('bvaluexx') || 0;\nvar testvalue = flow.get('testvaluexx') || 0;\n\nconst bal = (lossf * 10) + valuexx\nconst crate = (lossf * 10) + crateload\n\n// Boiler Blow Control\nif (testvalue >= 80 && testvalue <= 90) {\n\n\nflow.set('crateload', crate)\nflow.set('cvaluexx', bal)\n\n} else {\n    flow.set('crateload', crateload)\n    flow.set('cvaluexx', valuexx)\n}\n\nmsg.value = bal\nmsg.topic = crate\nmsg.payload = (lossf * 10)\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 2100,
        "wires": [
            [
                "33f8b4e74f48a74c",
                "32a419461cf490dc",
                "ad6f5858dcbdbee8",
                "f579f4cb7ec26384",
                "79ce3cdf74f9a5c8",
                "a9707a6c4a8861b0",
                "767d0df9d8cfefb3"
            ]
        ]
    },
    {
        "id": "f579f4cb7ec26384",
        "type": "delay",
        "z": "442506512849cb45",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 2180,
        "wires": [
            [
                "6bb1741029a988dd"
            ]
        ]
    },
    {
        "id": "ce7350a2853e301a",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Casing up the bottles",
        "info": "",
        "x": 640,
        "y": 2180,
        "wires": []
    },
    {
        "id": "5d0adcce0b6644aa",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Empty Cases In",
        "func": "\n// Variables for the 'CASES' station to be \n// used throughout the flow\n\nvar valuef = flow.get('cvaluef') || 0;\nvar lossf = flow.get('clossf') || 0;\nvar valuexx = flow.get('cvaluexx') || 0;\n\n// no accounting at this time\n//     let bal = valuexx + valuef\n\n//     flow.set('cvaluexx', bal)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2100,
        "wires": [
            [
                "b1679135d3806e6b"
            ]
        ]
    },
    {
        "id": "f8bab99254356e7b",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 760,
        "y": 1920,
        "wires": [
            [
                "59cc0856da0bc550"
            ]
        ]
    },
    {
        "id": "5d5dfefc284fd1cc",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Set SQL for Case Production",
        "func": "\n// Define the variables for the 'BOIL' station to be \n// used throughout the flow. Set the start values\n\nvar valuef = flow.get('cvaluef') || 0;\nvar lossf = flow.get('clossf') || 0;\nvar valuexx = flow.get('cvaluexx') || 0;\n\nflow.set('cvaluef', 0)\nflow.set('clossf', 0)\nflow.set('cvaluexx', 0)\n\nlet payloadout = `(select * from IUGRED_17.Brewctl where PROCESS_NAME = 'CASES'\n);`\n\nmsg.payload = payloadout\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1920,
        "wires": [
            [
                "f8bab99254356e7b"
            ]
        ]
    },
    {
        "id": "591d982209137220",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "CASES Starting Values - From table as set by production qty",
        "info": "",
        "x": 1520,
        "y": 1920,
        "wires": []
    },
    {
        "id": "1abe5b4d32ef4666",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "CASES Station",
        "info": "",
        "x": 200,
        "y": 1920,
        "wires": []
    },
    {
        "id": "bdc3b537df2e4395",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Maintain Log",
        "info": "",
        "x": 1730,
        "y": 2360,
        "wires": []
    },
    {
        "id": "59cc0856da0bc550",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Set Start values for Case production",
        "func": "\n// Variables for the 'CASES' station to be \n// used throughout the flow\n\nvar valuef = flow.get('cvaluef') || 0;\nvar lossf = flow.get('clossf') || 0;\nvar valuexx = flow.get('cvaluexx') || 0;\nvar crateload = flow.get('crateload') || 0;\n\nlet payload = msg.payload\nlet workcasesin = payload[0].PROCESS_INPUT;\nlet workcasesloss = payload[0].PROCESS_LOSSES;\n\nconst wkcasesin = parseInt(workcasesin) \nconst wkcasesloss = parseInt(workcasesloss) \n\nflow.set('cvaluef', wkcasesin)\nflow.set('clossf', wkcasesloss)\nflow.set('crateload', 0)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1920,
        "wires": [
            [
                "6bb1741029a988dd",
                "10ae34e60b322395"
            ]
        ]
    },
    {
        "id": "977a72a84f343d2c",
        "type": "ui_chart",
        "z": "442506512849cb45",
        "name": "",
        "group": "3a71324c40ab6674",
        "order": 8,
        "width": 8,
        "height": 4,
        "label": "CASES LOADED INTO VAN (Max 10)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "1",
        "ymax": "11",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1310,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "c04e7a2baf3dcbe7",
        "type": "ui_led",
        "z": "442506512849cb45",
        "order": 5,
        "group": "3a71324c40ab6674",
        "width": 8,
        "height": 2,
        "label": "van fully loaded indicator",
        "labelPlacement": "right",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Vanload indicator",
        "x": 1890,
        "y": 2440,
        "wires": []
    },
    {
        "id": "ad6f5858dcbdbee8",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Reset indicator if Van full",
        "func": "\n// Variables for the 'WATER' station to be \n// used throughout the flow\n\nvar valuef = flow.get('cvaluef') || 0;\nvar lossf = flow.get('clossf') || 0;\nvar valuexx = flow.get('cvaluexx') || 0;\nvar crateload = flow.get('crateload') || 0;\n\nconst resett = 0\n\nmsg.payload = false;\n\nif (crateload == 100)  {\n\nmsg.payload = true;\n\n    return [msg, null]; \n\n}\n\nelse {\n\n    return [null, msg]; \n\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 2500,
        "wires": [
            [
                "7985cb6749b72906",
                "72d2b087dabc9f74"
            ],
            [
                "7985cb6749b72906"
            ]
        ]
    },
    {
        "id": "7985cb6749b72906",
        "type": "json",
        "z": "442506512849cb45",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1650,
        "y": 2500,
        "wires": [
            [
                "c04e7a2baf3dcbe7",
                "7aac7bc80f5d87c8",
                "7075f3408850287d"
            ]
        ]
    },
    {
        "id": "72d2b087dabc9f74",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Reset if van full (10 cases)",
        "func": "\n// Variables for the 'WATER' station to be \n// used throughout the flow\n\nvar valuef = flow.get('cvaluef') || 0;\nvar lossf = flow.get('clossf') || 0;\nvar valuexx = flow.get('cvaluexx') || 0;\nvar crateload = flow.get('crateload') || 0;\n\nconst resett = 0\n\n\nif (crateload == 100) {\n \n    msg.payload = ([])\n\n\n    flow.set('crateload', resett)\n\n  \n    }\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 2440,
        "wires": [
            [
                "4e33a6d04e37dad1"
            ]
        ]
    },
    {
        "id": "b8801280b8ed0ed8",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "Send [] to Clear",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 880,
        "y": 2340,
        "wires": [
            [
                "977a72a84f343d2c",
                "1818d12c31dc5943"
            ]
        ]
    },
    {
        "id": "4e33a6d04e37dad1",
        "type": "delay",
        "z": "442506512849cb45",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 2380,
        "wires": [
            [
                "977a72a84f343d2c",
                "1818d12c31dc5943"
            ]
        ]
    },
    {
        "id": "7a60907541d7cfaf",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 780,
        "y": 1220,
        "wires": [
            [
                "ff1d8fd715f5bf17"
            ]
        ]
    },
    {
        "id": "39c3c6315b66567d",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Set SQL for BOIL",
        "func": "\n// Define the variables for the 'WATER' station to be \n// used throughout the flow.  Set the start values\n\nvar valuef = flow.get('bvaluef') || 0;\nvar lossf = flow.get('bossf') || 0;\nvar valuexx = flow.get('bvaluexx') || 60;\n\nflow.set('bvaluef', 0)\nflow.set('blossf', 0)\nflow.set('bvaluexx', 60)\n\nlet payloadout = `(select * from IUGRED_17.Brewctl where PROCESS_NAME = 'BOIL'\n);`\n\nmsg.payload = payloadout\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1220,
        "wires": [
            [
                "7a60907541d7cfaf"
            ]
        ]
    },
    {
        "id": "ff1d8fd715f5bf17",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Set Start valies for BOIL",
        "func": "\n// Variables for the 'WATER' station to be \n// used throughout the flow\n\nvar valuef = flow.get('bvaluef') || 0;\nvar lossf = flow.get('blossf') || 0;\nvar valuexx = flow.get('bvaluexx') || 0;\nvar adjust = flow.get('adjust') || 0;\n\nlet payload = msg.payload\nlet workwaterin = payload[0].PROCESS_INPUT;\nlet workwaterloss = payload[0].PROCESS_LOSSES;\n\nconst wkboilin = parseInt(workwaterin) \nconst wkboilloss = parseInt(workwaterloss) \n\nlet adjusted = wkboilin + adjust\n\nflow.set('bvaluef', adjusted)\nflow.set('blossf', wkboilloss)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1220,
        "wires": [
            [
                "0f3e114db69cb13b"
            ]
        ]
    },
    {
        "id": "ef9724a5791556ad",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "BOIL Starting Values - From table as set by production qty",
        "info": "",
        "x": 850,
        "y": 1180,
        "wires": []
    },
    {
        "id": "fabdfc2a7376eb91",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "REMEMBER TO OPEN GATES BEFORE STARTING PRODUCTION",
        "info": "",
        "x": 240,
        "y": 600,
        "wires": []
    },
    {
        "id": "ab76bc2f153df274",
        "type": "ui_form",
        "z": "442506512849cb45",
        "name": "",
        "label": "PRODUCTION",
        "group": "01b5bec2534e4f4a",
        "order": 8,
        "width": 8,
        "height": 1,
        "options": [
            {
                "label": "Case Production per 5 sec",
                "value": "cases",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "cases": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "Form",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "f7d66606874698d0",
                "caf5ca3ff5e889c4"
            ]
        ]
    },
    {
        "id": "9c12b6e26b4e3192",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 560,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f7d66606874698d0",
        "type": "function",
        "z": "442506512849cb45",
        "name": "F insert a ROW",
        "func": "\nlet cases = \" \"\n\ncases = msg.payload.cases\n\n\nconst caseout = parseInt(cases) \n\n// Set the parsed input as a flow variable\nflow.set(\"casesFlowVariable\", caseout);\n\nmsg.payload = `update IUGRED_17.brewctl set PROCESS_LOSSES = ${caseout} where PROCESS_NAME = 'CASES' `\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "9c12b6e26b4e3192"
            ]
        ]
    },
    {
        "id": "31c1ee25dd5b3870",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Form To Set Production Starting Values - Number of cases per second",
        "info": "",
        "x": 290,
        "y": 180,
        "wires": []
    },
    {
        "id": "dd5ee160148e3339",
        "type": "ui_slider",
        "z": "442506512849cb45",
        "name": "",
        "label": "WATER IN Adj.",
        "tooltip": "",
        "group": "e207eea38c442aee",
        "order": 8,
        "width": 8,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "-50",
        "max": "50",
        "step": 1,
        "className": "",
        "x": 740,
        "y": 220,
        "wires": [
            [
                "09f9515cb2ac16f7",
                "f145bb08e0550022"
            ]
        ]
    },
    {
        "id": "908b2b4f53fa071c",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 1180,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "09f9515cb2ac16f7",
        "type": "function",
        "z": "442506512849cb45",
        "name": "WATER VARIABLE AND TABLE",
        "func": "\nlet water = 0\n\nvar valuef = flow.get('wvaluef') || 0;\n\n\nwater = msg.payload\n\n\nflow.set('wvaluef', water)\n\n\nmsg.payload = `update IUGRED_17.brewctl set PROCESS_INPUT = ${water} where PROCESS_NAME = 'WATER' `\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 220,
        "wires": [
            [
                "908b2b4f53fa071c"
            ]
        ]
    },
    {
        "id": "40626671d5a34d37",
        "type": "ui_slider",
        "z": "442506512849cb45",
        "name": "",
        "label": "THERMS IN Adj.",
        "tooltip": "",
        "group": "3e86821e0e02d9da",
        "order": 9,
        "width": 8,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "-25",
        "max": "25",
        "step": 1,
        "className": "",
        "x": 1390,
        "y": 220,
        "wires": [
            [
                "21492a7d80878bbf"
            ]
        ]
    },
    {
        "id": "7219c38a3dfde202",
        "type": "DB2 for i",
        "z": "442506512849cb45",
        "mydb": "c783136d02b66193",
        "name": "",
        "arraymode": true,
        "x": 1860,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "21492a7d80878bbf",
        "type": "function",
        "z": "442506512849cb45",
        "name": "BOIL VARIABLE AND TABLE",
        "func": "\nvar adjust = global.get('adjust') || 0;\nlet gas = 0\n\n\ngas = msg.payload\n\nglobal.set(\"adjust\", gas)\n\nmsg.payload = `update IUGRED_17.brewctl set PROCESS_ADJUSTMENT = ${gas} where PROCESS_NAME = 'BOIL' `\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 220,
        "wires": [
            [
                "7219c38a3dfde202"
            ]
        ]
    },
    {
        "id": "783e34b51357f6c3",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "PRODUCTION CONTROL",
        "info": "",
        "x": 250,
        "y": 140,
        "wires": []
    },
    {
        "id": "efba01d429e69807",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "LINK HAS BEEN PUT IN TO STOP PRODUCTION IF BOIL IS NOT 80-90DEG",
        "info": "",
        "x": 1590,
        "y": 340,
        "wires": []
    },
    {
        "id": "89121ec3d890fe8c",
        "type": "link in",
        "z": "442506512849cb45",
        "name": "Open Gate",
        "links": [
            "47cd0c522cd884af"
        ],
        "x": 85,
        "y": 1420,
        "wires": [
            [
                "6bb1741029a988dd",
                "39eec93ab8b1d8a0",
                "0f3e114db69cb13b"
            ]
        ]
    },
    {
        "id": "47cd0c522cd884af",
        "type": "link out",
        "z": "442506512849cb45",
        "name": "Open Gate",
        "mode": "link",
        "links": [
            "631d8ea084a59726",
            "fd05c61990ade597",
            "89121ec3d890fe8c"
        ],
        "x": 455,
        "y": 640,
        "wires": []
    },
    {
        "id": "501ba7657af88656",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "toggle",
        "payloadType": "str",
        "x": 90,
        "y": 640,
        "wires": [
            [
                "47cd0c522cd884af"
            ]
        ]
    },
    {
        "id": "f01966ebedb0946d",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Water Slider",
        "info": "",
        "x": 730,
        "y": 180,
        "wires": []
    },
    {
        "id": "d9723acdc2f199dc",
        "type": "link out",
        "z": "442506512849cb45",
        "name": "Start",
        "mode": "link",
        "links": [
            "8e723db6e85f3b29",
            "c1be4706dea30b98"
        ],
        "x": 455,
        "y": 560,
        "wires": []
    },
    {
        "id": "b46186319c9832a8",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Heating Slider",
        "info": "",
        "x": 1370,
        "y": 180,
        "wires": []
    },
    {
        "id": "a5e49a640c89ca2b",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "WATER Starting Values - From table as set by production qty",
        "info": "",
        "x": 1420,
        "y": 840,
        "wires": []
    },
    {
        "id": "986064d82b2457f0",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Make sure Boiler is within operating temp range",
        "info": "",
        "x": 1100,
        "y": 940,
        "wires": []
    },
    {
        "id": "7dee961526d06317",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Make sure Boiler is within operating temp range",
        "info": "",
        "x": 1060,
        "y": 2040,
        "wires": []
    },
    {
        "id": "caf5ca3ff5e889c4",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 145",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 260,
        "wires": []
    },
    {
        "id": "33d5007aa1a3a922",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Manual Overrides",
        "info": "",
        "x": 370,
        "y": 980,
        "wires": []
    },
    {
        "id": "6deec322368cb2b8",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "Manual Overrides",
        "info": "",
        "x": 370,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ed72c4573faa4ccb",
        "type": "ui_form",
        "z": "442506512849cb45",
        "name": "Brewery Team",
        "label": "Brewery Team 1",
        "group": "ac1eab09c73ce8f3",
        "order": 2,
        "width": 8,
        "height": 1,
        "options": [
            {
                "label": "Deliveries Notification",
                "value": "deliver",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Management Advice",
                "value": "manage",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "deliver": "",
            "manage": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 160,
        "y": 2600,
        "wires": [
            [
                "efcb072bd8330a94"
            ]
        ]
    },
    {
        "id": "efcb072bd8330a94",
        "type": "function",
        "z": "442506512849cb45",
        "name": "function 68",
        "func": "let manage = msg.payload.manage\nlet deliver = msg.payload.deliver\n\nglobal.set('managemail', manage)\nglobal.set('delivermail', deliver)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2600,
        "wires": [
            [
                "178e67c4e2a37165"
            ]
        ]
    },
    {
        "id": "178e67c4e2a37165",
        "type": "function",
        "z": "442506512849cb45",
        "name": "function 69",
        "func": "var manage = global.get('managemmail') \nvar deliver = global.get('delivermmail')\n\nmsg.payload = manage\nmsg.topic = deliver\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2600,
        "wires": [
            [
                "0ccfd0efc0616d18"
            ]
        ]
    },
    {
        "id": "0ccfd0efc0616d18",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 222",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2600,
        "wires": []
    },
    {
        "id": "f1142b9120f68abc",
        "type": "comment",
        "z": "442506512849cb45",
        "name": "WHERE DO YOU THINK THESE SHOULD GO?",
        "info": "",
        "x": 600,
        "y": 2980,
        "wires": []
    },
    {
        "id": "422832de789f2dd5",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 226",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 360,
        "wires": []
    },
    {
        "id": "495481dad7bc643b",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 227",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 420,
        "wires": []
    },
    {
        "id": "51159dc9a629dcf0",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 228",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 500,
        "wires": []
    },
    {
        "id": "368c1b5fbdffc71e",
        "type": "delay",
        "z": "442506512849cb45",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "d9723acdc2f199dc"
            ]
        ]
    },
    {
        "id": "32a419461cf490dc",
        "type": "ui_artlessgauge",
        "z": "442506512849cb45",
        "group": "3a71324c40ab6674",
        "order": 2,
        "width": 8,
        "height": 8,
        "name": "",
        "icon": "",
        "label": "Cases Produced",
        "unit": "",
        "layout": "radial",
        "decimals": 0,
        "differential": false,
        "minmax": true,
        "colorTrack": "#555555",
        "style": "",
        "colorFromTheme": true,
        "property": "value",
        "secondary": "secondary",
        "inline": false,
        "animate": true,
        "sectors": [
            {
                "val": 0,
                "col": "#ff9900",
                "t": "min",
                "dot": 5
            },
            {
                "val": 500,
                "col": "#ff9900",
                "t": "max",
                "dot": 5
            }
        ],
        "lineWidth": "7",
        "bgcolorFromTheme": true,
        "diffCenter": "",
        "x": 1460,
        "y": 2280,
        "wires": []
    },
    {
        "id": "79ce3cdf74f9a5c8",
        "type": "function",
        "z": "442506512849cb45",
        "name": "Reset Payload for Graph",
        "func": "msg.payload = msg.topic\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2280,
        "wires": [
            [
                "977a72a84f343d2c",
                "1818d12c31dc5943"
            ]
        ]
    },
    {
        "id": "25e29f4f94754953",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 1000",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b974e6973294009d",
        "type": "link out",
        "z": "442506512849cb45",
        "name": "water link out",
        "mode": "link",
        "links": [
            "e0c75398960bb410"
        ],
        "x": 1035,
        "y": 1060,
        "wires": []
    },
    {
        "id": "f145bb08e0550022",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 1002",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 280,
        "wires": []
    },
    {
        "id": "55493be88e4b8ab2",
        "type": "link out",
        "z": "442506512849cb45",
        "name": "heat loss link out",
        "mode": "link",
        "links": [
            "d3e987e9a874fde4",
            "f7d03871798669c4",
            "849cc2ad7d7bcc57"
        ],
        "x": 1035,
        "y": 1460,
        "wires": []
    },
    {
        "id": "10ae34e60b322395",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 1003",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1960,
        "wires": []
    },
    {
        "id": "d3afce734bc9dec8",
        "type": "link in",
        "z": "442506512849cb45",
        "name": "dash switch in",
        "links": [
            "db00a44aabc70979"
        ],
        "x": 65,
        "y": 520,
        "wires": [
            [
                "368c1b5fbdffc71e",
                "19d4ad309754d27f"
            ]
        ]
    },
    {
        "id": "41b6868ff3beeeac",
        "type": "link in",
        "z": "442506512849cb45",
        "name": "gate control in",
        "links": [
            "f25d8db4aacf64a3"
        ],
        "x": 75,
        "y": 680,
        "wires": [
            [
                "47cd0c522cd884af"
            ]
        ]
    },
    {
        "id": "a9707a6c4a8861b0",
        "type": "link out",
        "z": "442506512849cb45",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "50d40033b3e15275"
        ],
        "x": 1225,
        "y": 2240,
        "wires": []
    },
    {
        "id": "767d0df9d8cfefb3",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 1005",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 2200,
        "wires": []
    },
    {
        "id": "fb7c78ea78dc6ad9",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 1006",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1500,
        "wires": []
    },
    {
        "id": "aee7556795a9317f",
        "type": "link in",
        "z": "442506512849cb45",
        "name": "link in 4",
        "links": [
            "f4b66092562fa23f"
        ],
        "x": 1225,
        "y": 300,
        "wires": [
            [
                "40626671d5a34d37",
                "9cf3e9e495124194"
            ]
        ]
    },
    {
        "id": "b80be52727f8b00d",
        "type": "ui-form",
        "z": "442506512849cb45",
        "name": "PRODUCTION",
        "group": "7a48c29dc27505eb",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Case Production per 5 sec",
                "key": "cases",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "cases": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "resetOnSubmit": true,
        "topic": "Form",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "f7d66606874698d0",
                "caf5ca3ff5e889c4"
            ]
        ]
    },
    {
        "id": "e578b4bb09dc975e",
        "type": "ui-slider",
        "z": "442506512849cb45",
        "group": "884f6a12d7a70148",
        "name": "WATER IN Adj.",
        "label": "slider",
        "tooltip": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": true,
        "min": "-50",
        "max": "50",
        "step": 1,
        "className": "",
        "x": 740,
        "y": 280,
        "wires": [
            [
                "09f9515cb2ac16f7"
            ]
        ]
    },
    {
        "id": "9cf3e9e495124194",
        "type": "ui-slider",
        "z": "442506512849cb45",
        "group": "408e6421486ff897",
        "name": "THERMS IN Adj.",
        "label": "slider",
        "tooltip": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": true,
        "min": "-25",
        "max": "25",
        "step": 1,
        "className": "",
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "21492a7d80878bbf"
            ]
        ]
    },
    {
        "id": "1894870b5529503d",
        "type": "ui-table",
        "z": "442506512849cb45",
        "group": "884f6a12d7a70148",
        "name": "Brew Water log",
        "label": "text",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "autocols": true,
        "columns": [],
        "x": 1860,
        "y": 1100,
        "wires": []
    },
    {
        "id": "44af189396460c2f",
        "type": "ui-gauge",
        "z": "442506512849cb45",
        "name": "Brew Temperature",
        "group": "408e6421486ff897",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "gauge",
        "units": "°C",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffc800"
            },
            {
                "from": "79",
                "color": "#ffc800"
            },
            {
                "from": "80",
                "color": "#5cd65c"
            },
            {
                "from": "90",
                "color": "#5cd65c"
            },
            {
                "from": "91",
                "color": "#ea5353"
            },
            {
                "from": "100",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1390,
        "y": 1560,
        "wires": []
    },
    {
        "id": "088c8a9c4c3982fd",
        "type": "ui-table",
        "z": "442506512849cb45",
        "group": "408e6421486ff897",
        "name": "Brew Flow log",
        "label": "text",
        "order": 2,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "autocols": true,
        "columns": [],
        "x": 1780,
        "y": 1480,
        "wires": []
    },
    {
        "id": "533c69c89e3dab39",
        "type": "ui-template",
        "z": "442506512849cb45",
        "group": "",
        "page": "",
        "ui": "fdd8d859bd63ebe6",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": ".led-level{\n    display: grid;\n    grid-template-rows: 1.3em minmax(3px, 1fr) .7em;\n    gap: 2px;\n    height: 100%;\n}\n.led-level-stripe{\n    display: flex;\n    gap:2px;\n}    \n.led-level-led {\n    --s:var(--shadow,0.2);\n    --shadowColor:rgba(0,0,0,var(--s));\n    background: #ffffff;\n    width: 100%;\n    height: 100%;\n    outline:1px solid;\n    outline-offset:-1px;\n    border-radius: 0px;\n    box-shadow: inset 0px 0px 10px 0px var(--shadowColor), 0px 0px 3px 0px var(--shadowColor);\n    filter: brightness(0.4);\n}\n.led-level-text{\n    font-size: 1.25em;\n    line-height: 1em;\n    align-self: end;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    user-select: none;\n}\n.led-level-value{       \n    font-weight:bold;\n}\n.led-level-unit{\n    font-size:.75em;\n    font-weight:normal;\n    padding-inline-start: 0.15em;\n}\n.led-level-limits{\n    display: flex;\n    justify-content: space-between;\n    font-size: .75em;\n    line-height: .75em;\n    align-content: flex-end;\n    flex-wrap: wrap;\n     user-select: none;\n}\n.round-led-level, .led-level-vertical{\n    display: grid;\n    grid-template-rows: 1em 1fr;\n    width:100%;\n    height: 100%;\n    aspect-ratio: 1/1;\n    position: relative;\n    margin: auto;\n}\n.round-led-level-graph{\n    position: relative;\n    aspect-ratio: 1;\n}\n.round-led-level-stripe{\n    display: block;\n    position: absolute;\n    left: 50%;\n    top: 56%;\n    rotate: 135deg;  \n}    \n.round-led-level-led {\n    --s:var(--shadow,0.2);\n    --shadowColor:rgba(0,0,0,var(--s));\n    background: #ffffff;\n    position: absolute;\n    width: calc(var(--ledsize) * 1px);\n    aspect-ratio: 1/1;\n    border-radius: 4px;\n    outline:1px solid;\n    outline-offset:-1px;\n    box-shadow: inset 0px 0px calc(var(--ledsize) / 3 * 1px) 0px var(--shadowColor), 0px 0px calc(var(--ledsize) / 7 * 1px) 0px var(--shadowColor);\n    filter: brightness(0.4);\n    transform-origin: center center;\n}\n.round-led-level-text{    \n    font-size: clamp(0.5em,calc(var(--size) * .1 * 1px),1.25em);\n    line-height: 1rem;\n    text-align: center;\n    user-select: none;\n    white-space: nowrap;\n}\n.round-led-level-centered-text{\n    position: absolute;\n    inset: 0;\n    font-size: 1rem;\n    line-height: 1;\n    display: grid;\n    text-align: center;\n    grid-template-rows: 1.5fr 1fr;\n    gap: 0.1em;\n    user-select: none;   \n    align-items: center;\n}\n.round-led-level-value{       \n    font-weight:bold;\n    font-size: calc(var(--size) * .15 * 1px);\n    align-self: end;\n}\n.round-led-level-unit{\n    font-size:calc(var(--size) * .1 * 1px);\n    font-weight:normal;\n    align-self: start;\n    padding-inline-start: 0.15em;\n}\n.round-led-level-limits{\n    position: absolute;\n    inset:0; \n    display: flex;\n    justify-content: space-between;\n    font-size: calc(var(--size) * .06 * 1px);\n    line-height: calc(var(--size) * .06 * 1px);\n    align-content: flex-end;\n    flex-wrap: wrap;\n    padding-inline:1em;\n    user-select: none;\n}\n.ag-wrapper-2 {\n    display: grid;\n    grid-template-columns: 3em 1fr;\n    gap:1em;\n}\n.ag-wrapper-1 {\n    display: grid;\n    grid-template-columns: 1fr;   \n}\n.ag-icon{\n    font-size: 2em;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;        \n}\n.ag-content{\n    display: grid;\n    grid-template-rows: 1fr 7px 0.75em;\n    gap: 2px;\n}\n.ag-text{\n    font-size: 1.25em;\n    line-height: 1em;\n    align-self: end;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    user-select: none;\n}\n.ag-value{       \n    font-weight:bold;\n}\n.ag-unit{\n    font-size:.75em;\n    font-weight:normal;\n    padding-inline-start: 0.15em;\n}\n.ag-limits{\n    display: flex;\n    justify-content: space-between;\n    font-size: .75em;\n    line-height: .75em;\n    align-content: center;\n    flex-wrap: wrap;\n    user-select: none;\n}\n\n.ag-track{\n    position:relative;\n    display:flex;\n    align-items: center;\n    width: 100%;\n    border-radius: 6px;\n}\n\n.ag-track-background{\n    position:absolute;\n    background: var(--line-color,rgb(var(--v-theme-primary)));\n    opacity: 0.45;\n    width: 100%;\n    height: 50%;\n    border-radius:inherit;\n}\n.ag-track-foreground{\n    position:absolute;\n    background-color: var(--line-color,rgb(var(--v-theme-primary)));\n    width: 50%;\n    height: 100%;\n    max-width: 100%;\n    border-radius:inherit;\n    transition:inherit;\n}\n.led-level-vertical{\n    gap:calc(var(--size) * .1 * 1px);\n    aspect-ratio: var(--aspect-ratio);\n}\n.led-level-vertical-content{\n    display:grid;\n    grid-template-columns: 1fr auto 4fr;\n}\n.led-level-vertical .round-led-level-centered-text{\n    grid-template-rows: 2.5fr 1fr;\n    padding-inline-start: 1em;\n}\n.led-level-vertical .round-led-level-value{\n    font-size: calc(var(--size) * .2 * 1px);\n}\n.led-level-vertical .led-level-stripe{\n    flex-direction: column-reverse;\n}\n.led-level-vertical .led-level-limits{\n   display: flex;\n    justify-content: space-between;\n    font-size: calc(var(--size) * .075 * 1px);\n    line-height: calc(var(--size) * .075 * 1px);\n    align-content: flex-start;\n    align-items: start;\n    flex-wrap: wrap;\n    user-select: none;\n    flex-direction: column;\n    padding-inline-start: 0.4em;\n}\n.led-level-flat div{\n    box-shadow: unset;\n}",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "site:style",
        "className": "",
        "x": 1900,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "6fc2814eda690c05",
        "type": "ui-table",
        "z": "442506512849cb45",
        "group": "7fd0c5964823e9f4",
        "name": "Cases and Bottles out",
        "label": "text",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "autocols": true,
        "columns": [],
        "x": 2040,
        "y": 2240,
        "wires": []
    },
    {
        "id": "1818d12c31dc5943",
        "type": "ui-chart",
        "z": "442506512849cb45",
        "group": "7fd0c5964823e9f4",
        "name": "",
        "label": "CASES LOADED INTO VAN (Max 10)",
        "order": 3,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "",
        "ymin": "1",
        "ymax": "11",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": 8,
        "className": "",
        "x": 1510,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "7075f3408850287d",
        "type": "ui-led",
        "z": "442506512849cb45",
        "name": "Vanload indicator",
        "group": "7fd0c5964823e9f4",
        "order": 2,
        "width": "0",
        "height": "0",
        "label": "van fully loaded indicator",
        "labelPlacement": "right",
        "labelAlignment": "center",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": false,
        "showGlow": true,
        "x": 1890,
        "y": 2400,
        "wires": []
    },
    {
        "id": "a0c123cf01226e81",
        "type": "ui-chart",
        "z": "442506512849cb45",
        "group": "408e6421486ff897",
        "name": "",
        "label": "chart",
        "order": 9007199254740991,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "50",
        "ymax": "100",
        "action": "replace",
        "pointShape": "false",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "5",
        "removeOlderUnit": "1",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": 6,
        "height": 8,
        "className": "",
        "x": 1990,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "db05808dcba1b12a",
        "type": "debug",
        "z": "442506512849cb45",
        "name": "debug 1011",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a413f873b7ef43c7",
        "type": "function",
        "z": "442506512849cb45",
        "name": "function 75",
        "func": "// Example function to format data for the chart node\n\n// Initialize an array to hold the chart data points\nlet chartData = [];\n\n// Loop through each item in the payload\nmsg.payload.forEach(item => {\n    // Combine LAST_UPDATE and REGISTERED_AT to form a full timestamp\n    let timestamp = `${item.LAST_UPDATE} ${item.REGISTERED_AT}`;\n    // Convert timestamp to a JavaScript Date object (assuming times are local)\n    let date = new Date(timestamp.replace(/\\./g, ':')); // Replace dots with colons in time part\n\n    // Push an object with 'x' as the timestamp and 'y' as the numeric value of PROCESS_CURRENT_VALUE\n    chartData.push({\n        x: date.getTime(), // Chart node expects timestamp in milliseconds\n        y: parseFloat(item.PROCESS_CURRENT_VALUE) // Ensure the value is a number\n    });\n});\n\n// Prepare the message to be sent to the chart node\n// Assuming you are charting data for a single series\nmsg.payload = [{\n    \"series\": [\"BOIL Process\"],\n    \"data\": [chartData], // Wrap chartData in an array because the chart node expects an array of datasets\n    \"labels\": [\"\"]\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 1340,
        "wires": [
            [
                "84b4eaba81520d46"
            ]
        ]
    },
    {
        "id": "84b4eaba81520d46",
        "type": "ui_chart",
        "z": "442506512849cb45",
        "name": "",
        "group": "3e86821e0e02d9da",
        "order": 10,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "50",
        "ymax": "100",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2050,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "d9bff8f7de6840a3",
        "type": "function",
        "z": "442506512849cb45",
        "name": "function 76",
        "func": "// Example transformation for DB2 for i data to chart data format\nlet chartData = msg.payload.map(item => {\n    // Assuming REGISTERED_AT is in 'HH.MM.SS' format and needs conversion to a JavaScript Date object\n    // Adjust the date parsing as necessary for your specific time format and requirements\n    let dateParts = item.LAST_UPDATE.split(\"-\");\n    let timeParts = item.REGISTERED_AT.split(\".\");\n\n    let date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2], timeParts[0], timeParts[1], timeParts[2]);\n\n    return {\n        x: date.getTime(),\n        y: parseFloat(item.PROCESS_CURRENT_VALUE)\n    };\n});\n\nreturn {\n    topic: \"BOIL\",\n    payload: chartData\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "db05808dcba1b12a",
                "a0c123cf01226e81"
            ]
        ]
    },
    {
        "id": "28f8a9d9c380f54b",
        "type": "inject",
        "z": "442506512849cb45",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "x": 90,
        "y": 3540,
        "wires": [
            [
                "907f5d1161127023"
            ]
        ]
    },
    {
        "id": "a18c78512355a321",
        "type": "group",
        "z": "442506512849cb45",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7b9a457bc6487cd5",
            "09081a75ea9b4ff1",
            "0bc0039c9f2f801f",
            "98f0daa5e16a2554",
            "5e9fa6f9aeecb79b",
            "450c8e086852c064",
            "60e1fc98b194d0b8",
            "630672c7ef0b6257",
            "c1be4706dea30b98",
            "f59959da96d69c84",
            "631d8ea084a59726",
            "443f5588e6d6cb6d",
            "7d6a02718f4685f2"
        ],
        "x": 794,
        "y": 439,
        "w": 1072,
        "h": 302
    },
    {
        "id": "7b9a457bc6487cd5",
        "type": "ui_gauge",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": " INGREDIENT COUNT",
        "group": "01b5bec2534e4f4a",
        "order": 2,
        "width": 8,
        "height": 7,
        "gtype": "compass",
        "title": "INGREDIENT COUNT",
        "label": "BAILS",
        "format": "{{value | number}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "45",
        "seg2": "85",
        "diff": false,
        "className": "",
        "x": 1740,
        "y": 700,
        "wires": []
    },
    {
        "id": "09081a75ea9b4ff1",
        "type": "function",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "Maintain Hop Count",
        "func": "\nvar hops = flow.get('hopcount') || 1;\n\n\n\n// let hoptot = parseInt(hopcount, 10)\n\nlet hopadd = hops +1\n\n\nflow.set('hopcount', hopadd)\n\nmsg.value = hopadd\nmsg.payload = hopadd\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 700,
        "wires": [
            [
                "7b9a457bc6487cd5",
                "0bc0039c9f2f801f",
                "7d6a02718f4685f2"
            ]
        ]
    },
    {
        "id": "0bc0039c9f2f801f",
        "type": "delay",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 700,
        "wires": [
            [
                "f59959da96d69c84"
            ]
        ]
    },
    {
        "id": "98f0daa5e16a2554",
        "type": "function",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "Set Hopper Value - 1",
        "func": "\nmsg.value = 1\nmsg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 540,
        "wires": [
            [
                "5e9fa6f9aeecb79b",
                "450c8e086852c064",
                "443f5588e6d6cb6d"
            ]
        ]
    },
    {
        "id": "5e9fa6f9aeecb79b",
        "type": "ui_gauge",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "HOPPER INJECT",
        "group": "01b5bec2534e4f4a",
        "order": 5,
        "width": 8,
        "height": 5,
        "gtype": "gage",
        "title": "HOPPER INJECT",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#d53939"
        ],
        "seg1": "0",
        "seg2": "1",
        "diff": false,
        "className": "",
        "x": 1730,
        "y": 540,
        "wires": []
    },
    {
        "id": "450c8e086852c064",
        "type": "delay",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1420,
        "y": 600,
        "wires": [
            [
                "60e1fc98b194d0b8"
            ]
        ]
    },
    {
        "id": "60e1fc98b194d0b8",
        "type": "function",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "Set Hopper value - 0",
        "func": "\nmsg.value = 0\nmsg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 600,
        "wires": [
            [
                "5e9fa6f9aeecb79b",
                "443f5588e6d6cb6d"
            ]
        ]
    },
    {
        "id": "630672c7ef0b6257",
        "type": "comment",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "Hops in - No coding  >>>>>>>>>",
        "info": "",
        "x": 950,
        "y": 480,
        "wires": []
    },
    {
        "id": "c1be4706dea30b98",
        "type": "link in",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "Start",
        "links": [
            "d9723acdc2f199dc"
        ],
        "x": 845,
        "y": 540,
        "wires": [
            [
                "f59959da96d69c84"
            ]
        ]
    },
    {
        "id": "f59959da96d69c84",
        "type": "gate",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "98f0daa5e16a2554",
                "09081a75ea9b4ff1"
            ]
        ]
    },
    {
        "id": "631d8ea084a59726",
        "type": "link in",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "link in 1",
        "links": [
            "47cd0c522cd884af"
        ],
        "x": 845,
        "y": 600,
        "wires": [
            [
                "f59959da96d69c84"
            ]
        ]
    },
    {
        "id": "443f5588e6d6cb6d",
        "type": "ui-gauge",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "HOPPER INJECT",
        "group": "7a48c29dc27505eb",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "gauge",
        "units": "units",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "0.5",
                "color": "#ffc800"
            },
            {
                "from": "1",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "1",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1730,
        "y": 500,
        "wires": []
    },
    {
        "id": "7d6a02718f4685f2",
        "type": "ui-gauge",
        "z": "442506512849cb45",
        "g": "a18c78512355a321",
        "name": "INGREDIENT COUNT",
        "group": "7a48c29dc27505eb",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "gauge",
        "units": "BAILS",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "40",
                "color": "#ffc800"
            },
            {
                "from": "70",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1740,
        "y": 660,
        "wires": []
    },
    {
        "id": "ba61861851f387a8",
        "type": "group",
        "z": "442506512849cb45",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f3d6dec1a36adfd4",
            "03de8b87cfd6e650",
            "c79f97b11515df3d",
            "fb5a50b602774db9",
            "f35e013f81b5da38",
            "7b1b0ec3a39922f1",
            "23f9e5e44cf6225d",
            "aef0298f52246be2",
            "8e723db6e85f3b29",
            "16bed50986f44588",
            "fd05c61990ade597",
            "311964a4db0bce3f",
            "c437262d4c6c2408",
            "b8ccad07d0e22600",
            "a5aa3210bab35427",
            "a2ceee78a21df872"
        ],
        "x": 624,
        "y": 1579,
        "w": 1282,
        "h": 322
    },
    {
        "id": "f3d6dec1a36adfd4",
        "type": "comment",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "Swirl and Mash - No coding  >>>>>>>>>",
        "info": "",
        "x": 810,
        "y": 1620,
        "wires": []
    },
    {
        "id": "03de8b87cfd6e650",
        "type": "ui_gauge",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "SWIRL",
        "group": "ac1eab09c73ce8f3",
        "order": 9,
        "width": 8,
        "height": 7,
        "gtype": "donut",
        "title": "SWIRL",
        "label": "Rotations",
        "format": "{{value | number}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "45",
        "seg2": "85",
        "className": "",
        "x": 1820,
        "y": 1800,
        "wires": []
    },
    {
        "id": "c79f97b11515df3d",
        "type": "function",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "Set SWIRL Gauge value - 1000",
        "func": "\nmsg.value = 1000\nmsg.payload = 1000\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1780,
        "wires": [
            [
                "03de8b87cfd6e650",
                "fb5a50b602774db9",
                "311964a4db0bce3f",
                "a2ceee78a21df872"
            ]
        ]
    },
    {
        "id": "fb5a50b602774db9",
        "type": "delay",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1000,
        "y": 1860,
        "wires": [
            [
                "16bed50986f44588"
            ]
        ]
    },
    {
        "id": "f35e013f81b5da38",
        "type": "function",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "Set MASH Gauge Value - 1",
        "func": "\nmsg.value = 1\nmsg.payload =1\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1660,
        "wires": [
            [
                "7b1b0ec3a39922f1",
                "23f9e5e44cf6225d",
                "a5aa3210bab35427"
            ]
        ]
    },
    {
        "id": "7b1b0ec3a39922f1",
        "type": "ui_gauge",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "MASH",
        "group": "ac1eab09c73ce8f3",
        "order": 6,
        "width": 8,
        "height": 5,
        "gtype": "gage",
        "title": "MASAH",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#d53939"
        ],
        "seg1": "0",
        "seg2": "1",
        "diff": false,
        "className": "",
        "x": 1790,
        "y": 1660,
        "wires": []
    },
    {
        "id": "23f9e5e44cf6225d",
        "type": "delay",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1360,
        "y": 1740,
        "wires": [
            [
                "aef0298f52246be2"
            ]
        ]
    },
    {
        "id": "aef0298f52246be2",
        "type": "function",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "Set Mash Gauge Value - 0",
        "func": "\nmsg.value = 0\nmsg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1740,
        "wires": [
            [
                "7b1b0ec3a39922f1",
                "a5aa3210bab35427"
            ]
        ]
    },
    {
        "id": "8e723db6e85f3b29",
        "type": "link in",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "Start",
        "links": [
            "d9723acdc2f199dc"
        ],
        "x": 665,
        "y": 1680,
        "wires": [
            [
                "b8ccad07d0e22600"
            ]
        ]
    },
    {
        "id": "16bed50986f44588",
        "type": "gate",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1030,
        "y": 1740,
        "wires": [
            [
                "f35e013f81b5da38",
                "c79f97b11515df3d"
            ]
        ]
    },
    {
        "id": "fd05c61990ade597",
        "type": "link in",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "link in 2",
        "links": [
            "47cd0c522cd884af"
        ],
        "x": 795,
        "y": 1740,
        "wires": [
            [
                "16bed50986f44588"
            ]
        ]
    },
    {
        "id": "311964a4db0bce3f",
        "type": "delay",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1380,
        "y": 1860,
        "wires": [
            [
                "c437262d4c6c2408"
            ]
        ]
    },
    {
        "id": "c437262d4c6c2408",
        "type": "function",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "Set Swirl gauge value - 0",
        "func": "\nmsg.value = 0\nmsg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1860,
        "wires": [
            [
                "03de8b87cfd6e650",
                "a2ceee78a21df872"
            ]
        ]
    },
    {
        "id": "b8ccad07d0e22600",
        "type": "delay",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 1680,
        "wires": [
            [
                "16bed50986f44588"
            ]
        ]
    },
    {
        "id": "a5aa3210bab35427",
        "type": "ui-template",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "group": "73ee43647afa602c",
        "page": "",
        "ui": "",
        "name": "MASH",
        "order": 0,
        "width": "2",
        "height": "2",
        "head": "",
        "format": "<template>\n    <div>\n        <template v-if=\"type === 'round'\">\n            <div ref=\"hng\" class=\"round-led-level\" :style=\"`--size:${size}; --shadow:${shadow}; --ledsize:${ledSize};`\">\n                <header>\n                    <div class=\"round-led-level-text\">\n                        <span class=\"round-led-level-label\">{{label}}</span>\n                    </div>\n                </header>\n                <div class=\"round-led-level-graph\">\n                    <div class=\"round-led-level-stripe\" :class=\"{'led-level-flat': flat }\">\n                        <div v-for=\"(color, index) in colors\" :key=\"index\" class=\"round-led-level-led\"\n                            :ref=\"'dot-' + index\">\n                        </div>\n                    </div>\n                    <div class=\"round-led-level-centered-text\">\n                        <span class=\"round-led-level-value\">{{formattedValue}}</span>\n                        <span class=\"round-led-level-unit\">{{unit}}</span>\n                    </div>\n                    <div class=\"round-led-level-limits\">\n                        <span>{{min}}</span>\n                        <span>{{max}}</span>\n                    </div>\n                </div>\n                <div>\n        </template>\n        <template v-if=\"type === 'linear'\">\n            <div ref=\"hng\" class=\"led-level\" :style=\"`--shadow:${shadow};`\">\n                <div class=\"led-level-text\">\n                    <span class=\"led-level-label\">{{label}}</span>\n                    <span class=\"led-level-value\">{{formattedValue}}<span class=\"led-level-unit\">{{unit}}</span></span>\n                </div>\n                <div class=\"led-level-stripe\" :class=\"{'led-level-flat': flat }\">\n                    <div v-for=\"(color, index) in colors\" :key=\"index\" class=\"led-level-led\" :ref=\"'dot-' + index\">\n                    </div>\n                </div>\n                <div class=\"led-level-limits\">\n                    <span>{{min}}</span>\n                    <span>{{max}}</span>\n                </div>\n                <div>\n        </template>\n        <template v-if=\"type === 'vertical'\">\n            <div ref=\"hng\" class=\"led-level-vertical\" :style=\"`--shadow:${shadow}; --size:${size};`\">\n                <header>\n                    <div class=\"round-led-level-text\">\n                        <span class=\"round-led-level-label\">{{label}}</span>\n                    </div>\n                </header>\n                <div class=\"led-level-vertical-content\">\n                    <div class=\"led-level-stripe\" :class=\"{'led-level-flat': flat }\">\n                        <div v-for=\"(color, index) in colors\" :key=\"index\" class=\"led-level-led\" :ref=\"'dot-' + index\">\n                        </div>\n                    </div>\n                    <div class=\"led-level-limits\">\n                        <span>{{max}}</span>\n                        <span>{{min}}</span>\n                    </div>\n                    <div class=\"round-led-level-centered-text\">\n                        <span class=\"round-led-level-value\">{{formattedValue}}</span>\n                        <span class=\"round-led-level-unit\">{{unit}}</span>\n                    </div>\n                </div>\n            </div>\n\n        </template>\n        <template v-if=\"type === 'artless'\">\n            <div ref=\"hng\" :class=\"icon ? 'ag-wrapper-2' : 'ag-wrapper-1'\" :style=\"`--line-color:${colors[0]};`\">\n                <div v-if=\"icon\" class=\"ag-icon\">\n                    <v-icon aria-hidden=\"false\">{{icon}}</v-icon>\n                </div>\n                <div class=\"ag-content\">\n                    <div class=\"ag-text\">\n                        <span class=\"ag-label\">{{label}}</span>\n                        <span class=\"ag-value\">{{formattedValue}}<span class=\"ag-unit\">{{unit}}</span></span>\n                    </div>\n                    <div class=\"ag-track\" ref=\"agLine\">\n                        <div class=\"ag-track-background\"></div>\n                        <div class=\"ag-track-foreground\" :style=\"{'width': linesize +'%'}\"></div>\n                    </div>\n                    <div class=\"ag-limits\">\n                        <span class=\"ag-min\">{{min}}</span>\n                        <span class=\"ag-max\">{{max}}</span>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </div>\n</template>\n\n\n\n<script>\n    export default {\n    data(){\n        return {\n            //Define me here\n            type:\"round\", // Gauge type. \"artless\", \"linear\", \"vertical\" or \"round\"                                          \n            label:\"Mash\", // The label\n            icon:\"mdi-account\", // (type: artless) (optional) the icon\n            zeroCross:false,// (type: artless) line changes color depending on value being positive or negative (at least 2 colors must be defined and min must be 0)\n            min:0, // Smallest expected value\n            max:1, // Highest expected value\n            unit:\"units\",// The unit of the measurement\n            dim:0.3, //(type: round, linear, vertical) How dim is led when not glowing\n            shadow:0, //(type: round, linear, vertical) Led shadow intensity (too much makes graphics muddy, 0 removes shadows)\n            filterFunction:\"brightness\", // (type: round, linear, vertical) \"brightness\" for dark themes, \"opacity\" for light themes  \n            animate:true, // Animating led's is not most performant thing in the world.                          \n            \n            // Define colors\n\n            // For type \"round\", \"vertical\" and \"linear\" the count of colors equals count of led's.\n            // For type \"artless\" the line changes color based on percentage of value turned index of colors array.  \n            // For type \"round\" the led size depends on how many colors is defined. About 20 is optimal.\n            // Color can be defined as:\n            // HEX - \"#FF00FF\" \n            // RGB - rgb(0,65,88)\n            // named color - \"red\"\n            // or depend on some defined CSS variable      \n            colors:[\n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"red\",\n                    \"red\",\n                    \"red\",\n                    \"red\",\n                   ],            \n            \n            //no need to change those\n            value:0,\n            previousValue:0,\n            size:100,           \n            inited:false\n        }\n    },\n\n\n   \n    methods: {        \n        getElement: function(name,base){        \n            if(base){\n                return this.$refs[name]\n            }\n            return this.$refs[name][0]\n        },\n        validate(data){\n            let ret\n            if(typeof data !== \"number\"){\n                ret = parseFloat(data)\n                if(isNaN(ret)){\n                    console.log(\"BAD DATA! gauge type:\",this.type, \"id:\",this.id,\"data:\",data)\n                    return null\n                }   \n            }\n            else{\n                ret = data\n            }            \n            return ret\n        },\n\n        full: function(){\n            return Math.floor(this.colors.length*this.percentage/100)\n        },\n        half: function (){\n            let p = this.colors.length*this.percentage/100;\n            p -= this.full()\n            p *= .5\n            p += this.dim;\n            return p;\n        },\n        filter: function(amount){\n            let f\n            switch(amount){\n                case \"full\":{\n                    f = this.filterFunction == \"brightness\" ? \"brightness(1.1)\" : \"opacity(1)\";\n                    break\n                }\n                case \"half\":{\n                    f = this.filterFunction == \"brightness\" ? \"brightness(\" +this.half()+\")\" : \"opacity(\" +this.half()+\")\";\n                    break\n                }\n                default:{\n                    f = this.filterFunction == \"brightness\" ? \"brightness(\" +this.dim+\")\"  : \"opacity(\" +this.dim+\")\";\n                    break\n                }\n            }\n            return f\n        },\n\n        lit: function(){\n            if(this.inited == false){\n                return\n            }\n            const down = this.previousValue > this.value\n\n            let time = .01            \n            this.colors.forEach((color,i) => {\n                let dot = this.getElement(\"dot-\"+i);\n                if(!dot){\n                    console.log(\"lit() no dots found\")\n                    return\n                }                \n                if(i<this.full()){\n                    dot.style.filter=this.filter(\"full\");                   \n                }\n                else if(i==this.full()){\n                    dot.style.filter= this.filter(\"half\");                   \n                }\n                else{\n                    dot.style.filter= this.filter(\"dim\");                   \n                }\n                if(down){\n                    time = (this.colors.length - i) * .12                    \n                }else{\n                    time = i * 0.08\n                }\n                dot.style.transition = this.animate ? \"filter \"+time+\"s\" : \"unset\";\n            })\n            this.previousValue = this.value\n        },\n        changeLine:function(){\n            const line = this.getElement(\"agLine\",true);\n            if(!line){\n                console.log(\"no line found\")\n                return            \n            }\n           \n            let c = Math.floor(this.colors.length * this.percentage / 100)\n            if(c >= this.colors.length){\n                c = this.colors.length - 1\n            }\n            if(c < 0){\n                c = 0\n            }\n            if(this.zeroCross){\n                c = this.value > 0 ? 1 : 0\n            }\n            line.style.setProperty('--line-color',this.colors[c])\n\n        },\n        onResize:function(){            \n            let g = this.getElement(\"hng\",true)\n            if(!g){\n                return\n            }           \n            this.$nextTick(() => {\n                let last = this.size \n                let changed = this.type == \"vertical\" ? g.clientHeight : g.clientWidth;   \n                if(Math.abs(last - changed) < 3){\n                    return\n                }\n                this.size = changed\n                g.style.setProperty('--size',this.size);            \n                if(this.type == \"round\"){\n                    this.updateLayout()\n                }\n            })\n                              \n        },\n        updateLayout:function(){\n            let angle;\n            const step = 270 / this.colors.length;\n            const radius = (this.size - (this.size*0.1))/2\n            const s = this.ledSize / -2;\n            const outline = this.filterFunction == \"opacity\" ? \"black\" : \"white\";        \n            this.colors.forEach((c,i) => {\n                    let dot = this.getElement(\"dot-\"+i);\n                    if(!dot){\n                        console.log(\"round init()  no dots found\")\n                        return\n                    }\n                    dot.style.backgroundColor = c\n                    dot.style.outlineColor=\"color-mix(in srgb, \"+c+\", \"+outline+\" 35%)\";\n                    dot.style.transition = \"filter 0.1s\";\n                    dot.style.setProperty('--dot',i);\n                    angle = ((i+1)*step) * Math.PI / 180;\n                    dot.style.left = s + radius * Math.cos(angle) + 'px';\n                    dot.style.top = s + radius * Math.sin(angle) + 'px';\n                    dot.style.transform = 'translate('+s+'px, '+s+'px)'; \n                    dot.style.rotate = (angle - 0.08)+\"rad\"               \n                }\n            )\n        }\n    },\n    watch: {\n        msg: function(){    \n            if(this.msg.payload !== undefined){  \n                const v = this.validate(this.msg.payload)                \n                if(v === null){\n                    return\n                }         \n                this.value = v\n                if(this.type != \"artless\"){\n                    this.lit()\n                }\n                else{\n                    this.changeLine()\n                } \n            }\n        }\n    },\n    computed: {\n        formattedValue: function () {\n            return this.value.toFixed(2)\n        },\n        percentage: function(){\n            return Math.floor(((this.value - this.min) / (this.max - this.min)) * 100);\n        },\n        linesize:function(){\n            if(this.zeroCross){\n                return Math.floor(((Math.abs(this.value) - this.min) / (this.max - this.min)) * 100);           \n            }\n            else{\n                return Math.max(0,this.percentage)\n            }\n        },                \n        ledSize:function(){\n            const s = 4.71239 * ((this.size - (this.size*0.3))/2)            \n            return s / this.colors.length\n        },\n        flat:function(){\n            return this.shadow == 0\n        }\n\n    },\n    mounted(){\n        const outline = this.filterFunction == \"opacity\" ? \"black\" : \"white\";\n        if(this.type == \"round\"){\n            let g = this.getElement(\"hng\",true)\n            if(!g){\n                return\n            }            \n            this.resizeObserver = new ResizeObserver((entries) => {\n                this.onResize()\n            });\n            this.resizeObserver.observe(g);           \n            \n            setTimeout(()=>{\n                this.onResize()\n            },20)\n        }\n        else if(this.type == \"linear\"){\n            \n            this.colors.forEach((c,i) => {\n                    let dot = this.getElement(\"dot-\"+i);\n                    if(!dot){\n                        console.log(\"linear init() no dots found\")\n                        return\n                    }\n                    dot.style.outlineColor=\"color-mix(in srgb, \"+c+\", \"+outline+\" 35%)\";\n                    dot.style.backgroundColor = c               \n                    dot.style.transition = \"filter 0.1s\";\n                }\n            )\n        }\n        else if(this.type == \"vertical\"){\n            let g = this.getElement(\"hng\",true)\n            if(!g){\n                return\n            }\n            this.resizeObserver = new ResizeObserver((entries) => {\n                    this.onResize()\n                });\n                this.resizeObserver.observe(g);                \n                setTimeout(()=>{\n                this.onResize()\n            },20)\n            this.colors.forEach((c,i) => {\n                let dot = this.getElement(\"dot-\"+i);\n                if(!dot){\n                    console.log(\"linear init() no dots found\")\n                    return\n                }\n                dot.style.outlineColor=\"color-mix(in srgb, \"+c+\", \"+outline+\" 35%)\";\n                dot.style.backgroundColor = c\n                dot.style.transition = \"filter 0.1s\";\n            })\n        }\n        else if(this.type == \"artless\"){\n            const line = this.getElement(\"agLine\",true);\n            line.style.setProperty('--line-color',this.colors[0])\n            if(this.animate == true){                \n                if(!line){\n                    console.log(\"artless init() no line found\")\n                    return\n                }\n                line.style.transition = \"width 0.5s\";\n            }\n        }        \n       \n        this.inited = true;\n    },\n    unmounted () {\n        if(this.resizeObserver){\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;            \n        }\n    }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1790,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "a2ceee78a21df872",
        "type": "ui-template",
        "z": "442506512849cb45",
        "g": "ba61861851f387a8",
        "group": "73ee43647afa602c",
        "page": "",
        "ui": "",
        "name": "SWIRL",
        "order": 0,
        "width": "2",
        "height": "2",
        "head": "",
        "format": "<template>\n    <div>\n        <template v-if=\"type === 'round'\">\n            <div ref=\"hng\" class=\"round-led-level\" :style=\"`--size:${size}; --shadow:${shadow}; --ledsize:${ledSize};`\">\n                <header>\n                    <div class=\"round-led-level-text\">\n                        <span class=\"round-led-level-label\">{{label}}</span>\n                    </div>\n                </header>\n                <div class=\"round-led-level-graph\">\n                    <div class=\"round-led-level-stripe\" :class=\"{'led-level-flat': flat }\">\n                        <div v-for=\"(color, index) in colors\" :key=\"index\" class=\"round-led-level-led\"\n                            :ref=\"'dot-' + index\">\n                        </div>\n                    </div>\n                    <div class=\"round-led-level-centered-text\">\n                        <span class=\"round-led-level-value\">{{formattedValue}}</span>\n                        <span class=\"round-led-level-unit\">{{unit}}</span>\n                    </div>\n                    <div class=\"round-led-level-limits\">\n                        <span>{{min}}</span>\n                        <span>{{max}}</span>\n                    </div>\n                </div>\n                <div>\n        </template>\n        <template v-if=\"type === 'linear'\">\n            <div ref=\"hng\" class=\"led-level\" :style=\"`--shadow:${shadow};`\">\n                <div class=\"led-level-text\">\n                    <span class=\"led-level-label\">{{label}}</span>\n                    <span class=\"led-level-value\">{{formattedValue}}<span class=\"led-level-unit\">{{unit}}</span></span>\n                </div>\n                <div class=\"led-level-stripe\" :class=\"{'led-level-flat': flat }\">\n                    <div v-for=\"(color, index) in colors\" :key=\"index\" class=\"led-level-led\" :ref=\"'dot-' + index\">\n                    </div>\n                </div>\n                <div class=\"led-level-limits\">\n                    <span>{{min}}</span>\n                    <span>{{max}}</span>\n                </div>\n                <div>\n        </template>\n        <template v-if=\"type === 'vertical'\">\n            <div ref=\"hng\" class=\"led-level-vertical\" :style=\"`--shadow:${shadow}; --size:${size};`\">\n                <header>\n                    <div class=\"round-led-level-text\">\n                        <span class=\"round-led-level-label\">{{label}}</span>\n                    </div>\n                </header>\n                <div class=\"led-level-vertical-content\">\n                    <div class=\"led-level-stripe\" :class=\"{'led-level-flat': flat }\">\n                        <div v-for=\"(color, index) in colors\" :key=\"index\" class=\"led-level-led\" :ref=\"'dot-' + index\">\n                        </div>\n                    </div>\n                    <div class=\"led-level-limits\">\n                        <span>{{max}}</span>\n                        <span>{{min}}</span>\n                    </div>\n                    <div class=\"round-led-level-centered-text\">\n                        <span class=\"round-led-level-value\">{{formattedValue}}</span>\n                        <span class=\"round-led-level-unit\">{{unit}}</span>\n                    </div>\n                </div>\n            </div>\n\n        </template>\n        <template v-if=\"type === 'artless'\">\n            <div ref=\"hng\" :class=\"icon ? 'ag-wrapper-2' : 'ag-wrapper-1'\" :style=\"`--line-color:${colors[0]};`\">\n                <div v-if=\"icon\" class=\"ag-icon\">\n                    <v-icon aria-hidden=\"false\">{{icon}}</v-icon>\n                </div>\n                <div class=\"ag-content\">\n                    <div class=\"ag-text\">\n                        <span class=\"ag-label\">{{label}}</span>\n                        <span class=\"ag-value\">{{formattedValue}}<span class=\"ag-unit\">{{unit}}</span></span>\n                    </div>\n                    <div class=\"ag-track\" ref=\"agLine\">\n                        <div class=\"ag-track-background\"></div>\n                        <div class=\"ag-track-foreground\" :style=\"{'width': linesize +'%'}\"></div>\n                    </div>\n                    <div class=\"ag-limits\">\n                        <span class=\"ag-min\">{{min}}</span>\n                        <span class=\"ag-max\">{{max}}</span>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </div>\n</template>\n\n\n\n<script>\n    export default {\n    data(){\n        return {\n            //Define me here\n            type:\"round\", // Gauge type. \"artless\", \"linear\", \"vertical\" or \"round\"                                          \n            label:\"Swirl\", // The label\n            icon:\"mdi-account\", // (type: artless) (optional) the icon\n            zeroCross:false,// (type: artless) line changes color depending on value being positive or negative (at least 2 colors must be defined and min must be 0)\n            min:0, // Smallest expected value\n            max:1000, // Highest expected value\n            unit:\"Rotations\",// The unit of the measurement\n            dim:0.3, //(type: round, linear, vertical) How dim is led when not glowing\n            shadow:0, //(type: round, linear, vertical) Led shadow intensity (too much makes graphics muddy, 0 removes shadows)\n            filterFunction:\"brightness\", // (type: round, linear, vertical) \"brightness\" for dark themes, \"opacity\" for light themes  \n            animate:true, // Animating led's is not most performant thing in the world.                          \n            \n            // Define colors\n\n            // For type \"round\", \"vertical\" and \"linear\" the count of colors equals count of led's.\n            // For type \"artless\" the line changes color based on percentage of value turned index of colors array.  \n            // For type \"round\" the led size depends on how many colors is defined. About 20 is optimal.\n            // Color can be defined as:\n            // HEX - \"#FF00FF\" \n            // RGB - rgb(0,65,88)\n            // named color - \"red\"\n            // or depend on some defined CSS variable      \n            colors:[\n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"#0fb60f\",                   \n                    \"red\",\n                    \"red\",\n                    \"red\",\n                    \"red\",\n                   ],            \n            \n            //no need to change those\n            value:0,\n            previousValue:0,\n            size:100,           \n            inited:false\n        }\n    },\n\n\n   \n    methods: {        \n        getElement: function(name,base){        \n            if(base){\n                return this.$refs[name]\n            }\n            return this.$refs[name][0]\n        },\n        validate(data){\n            let ret\n            if(typeof data !== \"number\"){\n                ret = parseFloat(data)\n                if(isNaN(ret)){\n                    console.log(\"BAD DATA! gauge type:\",this.type, \"id:\",this.id,\"data:\",data)\n                    return null\n                }   \n            }\n            else{\n                ret = data\n            }            \n            return ret\n        },\n\n        full: function(){\n            return Math.floor(this.colors.length*this.percentage/100)\n        },\n        half: function (){\n            let p = this.colors.length*this.percentage/100;\n            p -= this.full()\n            p *= .5\n            p += this.dim;\n            return p;\n        },\n        filter: function(amount){\n            let f\n            switch(amount){\n                case \"full\":{\n                    f = this.filterFunction == \"brightness\" ? \"brightness(1.1)\" : \"opacity(1)\";\n                    break\n                }\n                case \"half\":{\n                    f = this.filterFunction == \"brightness\" ? \"brightness(\" +this.half()+\")\" : \"opacity(\" +this.half()+\")\";\n                    break\n                }\n                default:{\n                    f = this.filterFunction == \"brightness\" ? \"brightness(\" +this.dim+\")\"  : \"opacity(\" +this.dim+\")\";\n                    break\n                }\n            }\n            return f\n        },\n\n        lit: function(){\n            if(this.inited == false){\n                return\n            }\n            const down = this.previousValue > this.value\n\n            let time = .01            \n            this.colors.forEach((color,i) => {\n                let dot = this.getElement(\"dot-\"+i);\n                if(!dot){\n                    console.log(\"lit() no dots found\")\n                    return\n                }                \n                if(i<this.full()){\n                    dot.style.filter=this.filter(\"full\");                   \n                }\n                else if(i==this.full()){\n                    dot.style.filter= this.filter(\"half\");                   \n                }\n                else{\n                    dot.style.filter= this.filter(\"dim\");                   \n                }\n                if(down){\n                    time = (this.colors.length - i) * .12                    \n                }else{\n                    time = i * 0.08\n                }\n                dot.style.transition = this.animate ? \"filter \"+time+\"s\" : \"unset\";\n            })\n            this.previousValue = this.value\n        },\n        changeLine:function(){\n            const line = this.getElement(\"agLine\",true);\n            if(!line){\n                console.log(\"no line found\")\n                return            \n            }\n           \n            let c = Math.floor(this.colors.length * this.percentage / 100)\n            if(c >= this.colors.length){\n                c = this.colors.length - 1\n            }\n            if(c < 0){\n                c = 0\n            }\n            if(this.zeroCross){\n                c = this.value > 0 ? 1 : 0\n            }\n            line.style.setProperty('--line-color',this.colors[c])\n\n        },\n        onResize:function(){            \n            let g = this.getElement(\"hng\",true)\n            if(!g){\n                return\n            }           \n            this.$nextTick(() => {\n                let last = this.size \n                let changed = this.type == \"vertical\" ? g.clientHeight : g.clientWidth;   \n                if(Math.abs(last - changed) < 3){\n                    return\n                }\n                this.size = changed\n                g.style.setProperty('--size',this.size);            \n                if(this.type == \"round\"){\n                    this.updateLayout()\n                }\n            })\n                              \n        },\n        updateLayout:function(){\n            let angle;\n            const step = 270 / this.colors.length;\n            const radius = (this.size - (this.size*0.1))/2\n            const s = this.ledSize / -2;\n            const outline = this.filterFunction == \"opacity\" ? \"black\" : \"white\";        \n            this.colors.forEach((c,i) => {\n                    let dot = this.getElement(\"dot-\"+i);\n                    if(!dot){\n                        console.log(\"round init()  no dots found\")\n                        return\n                    }\n                    dot.style.backgroundColor = c\n                    dot.style.outlineColor=\"color-mix(in srgb, \"+c+\", \"+outline+\" 35%)\";\n                    dot.style.transition = \"filter 0.1s\";\n                    dot.style.setProperty('--dot',i);\n                    angle = ((i+1)*step) * Math.PI / 180;\n                    dot.style.left = s + radius * Math.cos(angle) + 'px';\n                    dot.style.top = s + radius * Math.sin(angle) + 'px';\n                    dot.style.transform = 'translate('+s+'px, '+s+'px)'; \n                    dot.style.rotate = (angle - 0.08)+\"rad\"               \n                }\n            )\n        }\n    },\n    watch: {\n        msg: function(){    \n            if(this.msg.payload !== undefined){  \n                const v = this.validate(this.msg.payload)                \n                if(v === null){\n                    return\n                }         \n                this.value = v\n                if(this.type != \"artless\"){\n                    this.lit()\n                }\n                else{\n                    this.changeLine()\n                } \n            }\n        }\n    },\n    computed: {\n        formattedValue: function () {\n            return this.value.toFixed(2)\n        },\n        percentage: function(){\n            return Math.floor(((this.value - this.min) / (this.max - this.min)) * 100);\n        },\n        linesize:function(){\n            if(this.zeroCross){\n                return Math.floor(((Math.abs(this.value) - this.min) / (this.max - this.min)) * 100);           \n            }\n            else{\n                return Math.max(0,this.percentage)\n            }\n        },                \n        ledSize:function(){\n            const s = 4.71239 * ((this.size - (this.size*0.3))/2)            \n            return s / this.colors.length\n        },\n        flat:function(){\n            return this.shadow == 0\n        }\n\n    },\n    mounted(){\n        const outline = this.filterFunction == \"opacity\" ? \"black\" : \"white\";\n        if(this.type == \"round\"){\n            let g = this.getElement(\"hng\",true)\n            if(!g){\n                return\n            }            \n            this.resizeObserver = new ResizeObserver((entries) => {\n                this.onResize()\n            });\n            this.resizeObserver.observe(g);           \n            \n            setTimeout(()=>{\n                this.onResize()\n            },20)\n        }\n        else if(this.type == \"linear\"){\n            \n            this.colors.forEach((c,i) => {\n                    let dot = this.getElement(\"dot-\"+i);\n                    if(!dot){\n                        console.log(\"linear init() no dots found\")\n                        return\n                    }\n                    dot.style.outlineColor=\"color-mix(in srgb, \"+c+\", \"+outline+\" 35%)\";\n                    dot.style.backgroundColor = c               \n                    dot.style.transition = \"filter 0.1s\";\n                }\n            )\n        }\n        else if(this.type == \"vertical\"){\n            let g = this.getElement(\"hng\",true)\n            if(!g){\n                return\n            }\n            this.resizeObserver = new ResizeObserver((entries) => {\n                    this.onResize()\n                });\n                this.resizeObserver.observe(g);                \n                setTimeout(()=>{\n                this.onResize()\n            },20)\n            this.colors.forEach((c,i) => {\n                let dot = this.getElement(\"dot-\"+i);\n                if(!dot){\n                    console.log(\"linear init() no dots found\")\n                    return\n                }\n                dot.style.outlineColor=\"color-mix(in srgb, \"+c+\", \"+outline+\" 35%)\";\n                dot.style.backgroundColor = c\n                dot.style.transition = \"filter 0.1s\";\n            })\n        }\n        else if(this.type == \"artless\"){\n            const line = this.getElement(\"agLine\",true);\n            line.style.setProperty('--line-color',this.colors[0])\n            if(this.animate == true){                \n                if(!line){\n                    console.log(\"artless init() no line found\")\n                    return\n                }\n                line.style.transition = \"width 0.5s\";\n            }\n        }        \n       \n        this.inited = true;\n    },\n    unmounted () {\n        if(this.resizeObserver){\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;            \n        }\n    }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1820,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "73ee43647afa602c",
        "type": "ui-group",
        "name": "Swirl and Mash",
        "page": "59f627896d9c7f78",
        "width": "6",
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "59f627896d9c7f78",
        "type": "ui-page",
        "name": "i-Brew Brewery",
        "ui": "fdd8d859bd63ebe6",
        "path": "/page1",
        "icon": "home",
        "layout": "flex",
        "theme": "c943b1737543dcbc",
        "order": -1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c943b1737543dcbc",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0bd09f",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "5f4628750b4a6276",
        "type": "group",
        "z": "442506512849cb45",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7aac7bc80f5d87c8",
            "8e19cae1d8ffb816",
            "57a2cf99f60cd148",
            "f5ad4296a05057a6",
            "1956e12620ed1e80",
            "ac809f20f5d3cefe"
        ],
        "x": 1934,
        "y": 2559,
        "w": 392,
        "h": 182
    },
    {
        "id": "7aac7bc80f5d87c8",
        "type": "exec",
        "z": "442506512849cb45",
        "g": "5f4628750b4a6276",
        "command": "env",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1985,
        "y": 2680,
        "wires": [
            [
                "57a2cf99f60cd148",
                "f5ad4296a05057a6"
            ],
            [
                "57a2cf99f60cd148"
            ],
            [
                "57a2cf99f60cd148"
            ]
        ],
        "l": false
    },
    {
        "id": "8e19cae1d8ffb816",
        "type": "mqtt out",
        "z": "442506512849cb45",
        "g": "5f4628750b4a6276",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "de887429d516dace",
        "x": 2215,
        "y": 2660,
        "wires": [],
        "l": false
    },
    {
        "id": "57a2cf99f60cd148",
        "type": "debug",
        "z": "442506512849cb45",
        "g": "5f4628750b4a6276",
        "name": "debug 237",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2125,
        "y": 2700,
        "wires": [],
        "l": false
    },
    {
        "id": "f5ad4296a05057a6",
        "type": "function",
        "z": "442506512849cb45",
        "g": "5f4628750b4a6276",
        "name": "function 53",
        "func": "let user  = ' '\nlet start = msg.payload.search(\"USER\") + 5;\nlet stop = msg.payload.search(\"SHLVL\") - 1;\n\n\nlet currentDate = new Date();\nlet cDay = currentDate.getDate()\nlet cMonth = currentDate.getMonth() + 1\nlet cYear = currentDate.getFullYear()\n\nlet stdate = cYear + \"-\" + cMonth + \"-\" + cDay;\n\nlet sttime = currentDate.getHours() + \":\" + currentDate.getMinutes() + \":\" + currentDate.getSeconds();\n\nvar crates = flow.get('cvaluexx')\nvar temp = flow.get('bvaluexx')\n\nlet diff = stop - start\n\nuser = msg.payload.substr(start, diff )\n\nmsg.topic = user\nmsg.payload = `{\"Student_Number\" : \"${user}\", \"Brew_Temp\": ${temp}, \"Cases_Out\": ${crates}, \"OPDATE\": \"${stdate}\", \"OPTIME\": \"${sttime}\"}`\nconsole.log('payload', msg.payload) \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2075,
        "y": 2660,
        "wires": [
            [
                "1956e12620ed1e80"
            ]
        ],
        "l": false
    },
    {
        "id": "1956e12620ed1e80",
        "type": "json",
        "z": "442506512849cb45",
        "g": "5f4628750b4a6276",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2145,
        "y": 2660,
        "wires": [
            [
                "8e19cae1d8ffb816"
            ]
        ],
        "l": false
    },
    {
        "id": "ac809f20f5d3cefe",
        "type": "comment",
        "z": "442506512849cb45",
        "g": "5f4628750b4a6276",
        "name": "Support:  PEASE DO NOT ALTER THIS CODE",
        "info": "",
        "x": 2130,
        "y": 2600,
        "wires": []
    },
    {
        "id": "de887429d516dace",
        "type": "mqtt-broker",
        "name": "",
        "broker": "ersc.ddns.net",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "61a469482897978d",
        "type": "group",
        "z": "442506512849cb45",
        "name": "DASHBOARD CONTROL FOR GATE CONTROL AND PRODUCTION START",
        "style": {
            "label": true
        },
        "nodes": [
            "27352c5b0a79bdc7",
            "5355ae4667bfd0c9",
            "db00a44aabc70979",
            "e5bf4d564b88ac76",
            "f25d8db4aacf64a3",
            "2c43f1f6a6c6cae4",
            "17fa4c547c7ac4c9",
            "792c225f5421332f",
            "686ce30be3e77a73",
            "907f5d1161127023",
            "e281d7cf26fa7b47",
            "021e26598896fe4c"
        ],
        "x": 174,
        "y": 3399,
        "w": 572,
        "h": 302
    },
    {
        "id": "27352c5b0a79bdc7",
        "type": "ui_button",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "name": "",
        "group": "6a863a2329b6ce53",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Start Production",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 280,
        "y": 3440,
        "wires": [
            [
                "5355ae4667bfd0c9"
            ]
        ]
    },
    {
        "id": "5355ae4667bfd0c9",
        "type": "function",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "name": "function 70",
        "func": "msg.payload2 = 0;\nmsg.limit = 10;\nmsg.value = 0;\nmsg.temp = 0;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 3440,
        "wires": [
            [
                "db00a44aabc70979",
                "e281d7cf26fa7b47"
            ]
        ]
    },
    {
        "id": "db00a44aabc70979",
        "type": "link out",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "name": "dash switch out",
        "mode": "link",
        "links": [
            "d3afce734bc9dec8"
        ],
        "x": 635,
        "y": 3440,
        "wires": []
    },
    {
        "id": "e5bf4d564b88ac76",
        "type": "ui_switch",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "name": "",
        "label": "Gate Control",
        "tooltip": "",
        "group": "6a863a2329b6ce53",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "open",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "close",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 3520,
        "wires": [
            [
                "f25d8db4aacf64a3",
                "e281d7cf26fa7b47"
            ]
        ]
    },
    {
        "id": "f25d8db4aacf64a3",
        "type": "link out",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "name": "gate control out",
        "mode": "link",
        "links": [
            "41b6868ff3beeeac"
        ],
        "x": 515,
        "y": 3500,
        "wires": []
    },
    {
        "id": "2c43f1f6a6c6cae4",
        "type": "ui_button",
        "z": "442506512849cb45",
        "d": true,
        "g": "61a469482897978d",
        "name": "",
        "group": "6a863a2329b6ce53",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset All",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 260,
        "y": 3660,
        "wires": [
            [
                "17fa4c547c7ac4c9"
            ]
        ]
    },
    {
        "id": "17fa4c547c7ac4c9",
        "type": "function",
        "z": "442506512849cb45",
        "d": true,
        "g": "61a469482897978d",
        "name": "Reset",
        "func": "// Reset flow variables to their initial states or default values\nflow.set('blossf', 0); // Adjust the default value as needed\nflow.set('bvaluef', 0); // Adjust the default value as needed\nflow.set('bvaluexx', 0); // Adjust the default value as needed\nflow.set('casesFlowVariable', 0); // Adjust the default value as needed\nflow.set('clossf', 0); // Adjust the default value as needed\nflow.set('crateload', 0); // Adjust the default value as needed\nflow.set('cvaluef', 0); // Adjust the default value as needed\nflow.set('cvaluexx', 0); // Adjust the default value as needed\nflow.set('hopcount', 0); // Adjust the default value as needed\nflow.set('lossf', 0); // Adjust the default value as needed\nflow.set('testvaluexx', 0); // Adjust the default value as needed\nflow.set('valuef', 0); // Adjust the default value as needed\nflow.set('valuexx', 0); // Adjust the default value as needed\nflow.set('wlossf', 0); // Adjust the default value as needed\nflow.set('wvaluef', 0); // Adjust the default value as needed\nflow.set('wvaluexx', 0); // Adjust the default value as needed\n\n// If you also need to reset global variables, use global.set\nglobal.set('emailSentCount', 0);\nglobal.set('adjust', 0);\nglobal.set('delivermail', '');\nglobal.set('managemail', ''); \n\n// Optionally, send a message indicating completion\nreturn { payload: \"All variables have been reset to default values.\" };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 3660,
        "wires": [
            [
                "792c225f5421332f"
            ]
        ]
    },
    {
        "id": "792c225f5421332f",
        "type": "debug",
        "z": "442506512849cb45",
        "d": true,
        "g": "61a469482897978d",
        "name": "debug 1007",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 3660,
        "wires": []
    },
    {
        "id": "686ce30be3e77a73",
        "type": "ui-button",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "group": "c5d471907689281f",
        "name": "",
        "label": "Start Production",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 300,
        "y": 3480,
        "wires": [
            [
                "5355ae4667bfd0c9"
            ]
        ]
    },
    {
        "id": "907f5d1161127023",
        "type": "ui-switch",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "name": "",
        "label": "Gate Control",
        "group": "c5d471907689281f",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "control",
        "topicType": "str",
        "style": "",
        "className": "",
        "onvalue": "open",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "close",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 270,
        "y": 3600,
        "wires": [
            [
                "e281d7cf26fa7b47",
                "021e26598896fe4c"
            ]
        ]
    },
    {
        "id": "e281d7cf26fa7b47",
        "type": "debug",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "name": "debug 1009",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 3580,
        "wires": []
    },
    {
        "id": "021e26598896fe4c",
        "type": "function",
        "z": "442506512849cb45",
        "g": "61a469482897978d",
        "name": "function 77",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 3560,
        "wires": [
            [
                "f25d8db4aacf64a3"
            ]
        ]
    },
    {
        "id": "6a863a2329b6ce53",
        "type": "ui_group",
        "name": "Power",
        "tab": "2215323be190c922",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5d471907689281f",
        "type": "ui-group",
        "name": "Power",
        "page": "59f627896d9c7f78",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2215323be190c922",
        "type": "ui_tab",
        "name": "i-Brew Brewery",
        "icon": "Hops-In",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e215b373e54f2b79",
        "type": "group",
        "z": "442506512849cb45",
        "name": "BOILER AUTOMATION",
        "style": {
            "label": true
        },
        "nodes": [
            "d3e987e9a874fde4",
            "a75e5d5d4489c577"
        ],
        "x": 994,
        "y": 79,
        "w": 322,
        "h": 82
    },
    {
        "id": "d3e987e9a874fde4",
        "type": "link in",
        "z": "442506512849cb45",
        "g": "e215b373e54f2b79",
        "name": "heat loss link in",
        "links": [
            "5c77f2ee015f20b2",
            "310c8323e4c38cc0",
            "55493be88e4b8ab2"
        ],
        "x": 1035,
        "y": 120,
        "wires": [
            [
                "a75e5d5d4489c577"
            ]
        ]
    },
    {
        "id": "a75e5d5d4489c577",
        "type": "function",
        "z": "442506512849cb45",
        "g": "e215b373e54f2b79",
        "name": "Automated Boiler",
        "func": "msg.ui_control = msg.ui_control || {min: -10, max: 10, step: 1};\nvar currentTemp = flow.get(\"bvaluexx\");\n// Retrieve the number of cases from a flow variable\nvar numberOfCases = flow.get(\"casesFlowVariable\") || 0;\n\nvar sliderAdjustment;\n\nif (currentTemp < 80) {\n    sliderAdjustment = (((3 * numberOfCases) - 5) + 4); // Value to increase temperature\n    msg.ui_control.max = (((3 * numberOfCases) - 5) + 4);\n} else if (currentTemp >= 80 && currentTemp <= 90) {\n    sliderAdjustment = ((3 * numberOfCases) - 5);\n} else if (currentTemp > 90) {\n    var tempExcess = currentTemp - 90;\n    sliderAdjustment = -((tempExcess * 0.5 + 5));\n}\n\n// Set the slider adjustment as the payload\nmsg.payload = sliderAdjustment;\n\n// Return the updated message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 120,
        "wires": [
            [
                "40626671d5a34d37",
                "9cf3e9e495124194"
            ]
        ]
    },
    {
        "id": "336c513e04afe233",
        "type": "group",
        "z": "442506512849cb45",
        "name": "WATER AUTOMATION",
        "style": {
            "label": true
        },
        "nodes": [
            "e0c75398960bb410",
            "2f81fdb84fe4bafd"
        ],
        "x": 374,
        "y": 59,
        "w": 312,
        "h": 82
    },
    {
        "id": "e0c75398960bb410",
        "type": "link in",
        "z": "442506512849cb45",
        "g": "336c513e04afe233",
        "name": "waterin",
        "links": [
            "b974e6973294009d"
        ],
        "x": 415,
        "y": 100,
        "wires": [
            [
                "2f81fdb84fe4bafd"
            ]
        ]
    },
    {
        "id": "2f81fdb84fe4bafd",
        "type": "function",
        "z": "442506512849cb45",
        "g": "336c513e04afe233",
        "name": "Automated Water",
        "func": "msg.ui_control = msg.ui_control || {min: 0, max: 100, step: 1};\n// Initialize variables\nconst loss = flow.get(\"wlossf\");\n\n// Retrieve the current water level from the flow variable\nconst currentWaterLevel = parseFloat(flow.get(\"wvaluexx\")) || 0; // Ensure it's a number and default to 0 if not found\n\n// Retrieve the number of cases from the flow variable\nconst casesFlowVariable = flow.get(\"casesFlowVariable\") || 0;\n\n// Calculate loss based on current water level\nif (currentWaterLevel < 80) {\n    msg.payload = loss * 2; // Adjust payload based on loss\n} else if (currentWaterLevel > 90) {\n    msg.payload = 0; // Prevent inflow\n} else if (currentWaterLevel >= 80 && currentWaterLevel <= 90) {\n    msg.payload = 10 * casesFlowVariable; // Adjust payload\n}\n\nmsg.ui_control.max = loss * 2\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 100,
        "wires": [
            [
                "dd5ee160148e3339",
                "e578b4bb09dc975e"
            ]
        ]
    },
    {
        "id": "df6548667878f39f",
        "type": "group",
        "z": "442506512849cb45",
        "name": "EMAIL NOTIFICATIONS",
        "style": {
            "label": true
        },
        "nodes": [
            "bc9f2826e1121022",
            "739bbff9c0cbc839",
            "50d40033b3e15275",
            "f8959e79ea41e81d",
            "485f5e4b6bb3981e",
            "12231d07d6c7a13a",
            "f7d03871798669c4",
            "37b61c3cf20c4bf4",
            "eb9902c39406c7ae",
            "7d9085c7037d1439",
            "b09e0c8accdc9170"
        ],
        "x": 54,
        "y": 3019,
        "w": 732,
        "h": 322
    },
    {
        "id": "bc9f2826e1121022",
        "type": "inject",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 3240,
        "wires": [
            [
                "739bbff9c0cbc839"
            ]
        ]
    },
    {
        "id": "739bbff9c0cbc839",
        "type": "function",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "Advise Customer that order is ready",
        "func": "var person = global.get('delivermail') || 0;\nvar currentCases = flow.get('cvaluexx') || 0;\nvar emailSentCount = global.get('emailSentCount') || 0; // Retrieve the count of emails sent\n\n// Check if the number of cases is a multiple of 100 and less than or equal to 2 emails have been sent\nif (currentCases % 100 === 0 && currentCases !== 0 && emailSentCount < 2) {\n    // Prepare the email variables\n    msg.topic = \"i-Brew Delivery Advice\"; // subject\n\n    // Calculate delivery time, 30 minutes from now\n    var now = new Date();\n    var deliveryTime = new Date(now.getTime() + 30 * 60000); // Adds 30 minutes to current time\n    var deliveryTimeStr = deliveryTime.toTimeString().split(' ')[0]; // Format to HH:MM:SS\n    var deliveryStart = deliveryTimeStr; // Assuming the delivery window starts at this time\n    // Assuming a 24-minute window for delivery for simplicity\n    var deliveryEnd = new Date(deliveryTime.getTime() + 24 * 60000).toTimeString().split(' ')[0];\n\n    // Enhanced and business-like email message\n    msg.payload = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            body { font-family: Arial, sans-serif; margin: 20px; background-color: #f8f8f8; color: #333; }\n            h1 { color: #007BFF; }\n            h2 { color: #333; }\n            p { font-size: 16px; }\n        </style>\n    </head>\n    <body>\n        <h1>Your Order of 'Old Burgler' Max Strength is En Route!</h1>\n        <h2>Delivery Window: ${deliveryStart} - ${deliveryEnd}</h2>\n        <p>We're pleased to confirm that your daily order of 'Old Burgler' Max Strength is on its way. Our driver is scheduled to arrive between ${deliveryStart} and ${deliveryEnd}. As part of our commitment to sustainability, we'll also collect yesterday's empties.</p>\n        <p>Should you have any special instructions or require further assistance, please do not hesitate to contact us. We're here to help!</p>\n        <p>Thank you for choosing iBrew & Co. We appreciate your business and look forward to serving you again.</p>\n    </body>\n    </html>\n    `;\n\n    msg.topic = \"i-Brew Delivery Advice\"; // Subject\n    msg.to = person; // Recipient\n    msg.from = \"iBrew & Co\"; // Sender\n    msg.cc = \"yemiarabambi@gmail.com\"; // CC\n\n    // Increment and save the count of emails sent\n    emailSentCount++;\n    global.set('emailSentCount', emailSentCount);\n\n    return msg;\n} else {\n    // Do not send an email if the currentCases is not a multiple of 100 or more than 2 emails have been sent\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 3240,
        "wires": [
            [
                "f8959e79ea41e81d"
            ]
        ]
    },
    {
        "id": "50d40033b3e15275",
        "type": "link in",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "case ready",
        "links": [
            "a9707a6c4a8861b0"
        ],
        "x": 295,
        "y": 3300,
        "wires": [
            [
                "739bbff9c0cbc839"
            ]
        ]
    },
    {
        "id": "f8959e79ea41e81d",
        "type": "e-mail",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 710,
        "y": 3240,
        "wires": []
    },
    {
        "id": "485f5e4b6bb3981e",
        "type": "inject",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 3120,
        "wires": [
            [
                "12231d07d6c7a13a"
            ]
        ]
    },
    {
        "id": "12231d07d6c7a13a",
        "type": "function",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "CRISIS",
        "func": "// Get the current temperature from a flow variable\nvar currentTemp = flow.get('bvaluexx') || 0;\n\n// Get the email count - how many times emails have been sent\nvar emailCount = global.get('emailCount') || 0;\n\nvar person = global.get('managemail') || 0;\nconsole.log('mail', person);\n\n// Check if the temperature exceeds 99 degrees and we've sent less than 2 emails\nif (currentTemp > 99 && emailCount < 2) {\n    // Prepare the email message with improved HTML structure and styling\n    msg.payload = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            body { font-family: Arial, sans-serif; margin: 20px; background-color: #f8f8f8; color: #333; }\n            h1 { color: #D32F2F; margin-bottom: 0; }\n            h2 { color: #1976D2; margin-top: 5px; }\n            p { font-size: 16px; }\n            .footer { margin-top: 20px; font-size: 14px; text-align: center; color: #777; }\n        </style>\n    </head>\n    <body>\n        <h1>Urgent: Brewery Alert</h1>   \n        <h2>Immediate Action Required</h2>\n        <p><strong>Attention:</strong> Due to an unexpected situation, our brewery has encountered a significant issue that requires immediate attention.</p>\n        <p>We urge you to contact the fire brigade immediately to mitigate the situation. We are taking all necessary steps on our end to address this emergency.</p>\n        <p><strong>Note:</strong> As a result of this incident, there may be delays in our beer production. We appreciate your understanding and patience as we work through this crisis.</p>\n        <div class=\"footer\">\n            Sincerely,<br>\n            iBrew & Co Team<br>\n            <a href=\"mailto:info@ibrewco.com\">info@ibrewco.com</a>\n        </div>\n    </body>\n    </html>\n    `;\n    msg.topic = \"Crisis Email\"; // Subject\n    msg.to = person; // Recipient\n    msg.from = \"iBrew & Co\"; // Sender\n    msg.cc = \"yemiarabambi@gmail.com\"; // CC\n\n    // Increment the email count and store it globally\n    emailCount++;\n    global.set('emailCount', emailCount);\n} else {\n    // Do not send an email if conditions are not met\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 3120,
        "wires": [
            [
                "37b61c3cf20c4bf4"
            ]
        ]
    },
    {
        "id": "f7d03871798669c4",
        "type": "link in",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "link in 3",
        "links": [
            "55493be88e4b8ab2"
        ],
        "x": 295,
        "y": 3080,
        "wires": [
            [
                "12231d07d6c7a13a"
            ]
        ]
    },
    {
        "id": "37b61c3cf20c4bf4",
        "type": "e-mail",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 610,
        "y": 3120,
        "wires": []
    },
    {
        "id": "eb9902c39406c7ae",
        "type": "comment",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "YOUR ORDER IS ON ITS WAY",
        "info": "",
        "x": 430,
        "y": 3200,
        "wires": []
    },
    {
        "id": "7d9085c7037d1439",
        "type": "comment",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "CRISIS AT THE BREWERY",
        "info": "",
        "x": 480,
        "y": 3060,
        "wires": []
    },
    {
        "id": "b09e0c8accdc9170",
        "type": "comment",
        "z": "442506512849cb45",
        "g": "df6548667878f39f",
        "name": "Set Deliveries to and Manager e-mail in e-mail flow",
        "info": "",
        "x": 270,
        "y": 3160,
        "wires": []
    },
    {
        "id": "03e1653057171a1d",
        "type": "group",
        "z": "442506512849cb45",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f33e688bcbb3b1c3",
            "0b9f58d4e8399ca2",
            "e965c150e60a0e5d",
            "f4b66092562fa23f",
            "e133eeea0f12fb6a",
            "b3a987b3bf6fb781",
            "849cc2ad7d7bcc57"
        ],
        "x": 14,
        "y": 3819,
        "w": 992,
        "h": 242
    },
    {
        "id": "f33e688bcbb3b1c3",
        "type": "function",
        "z": "442506512849cb45",
        "g": "03e1653057171a1d",
        "name": "function 74",
        "func": "// Assuming msg.payload contains the current state x_t\nlet k = 3.9; // Set this to the value that produces the level of chaos you want\nlet x_t = flow.get(\"bvaluexx\")/100; // Current proportion of the resource (e.g., water or temperature)\n\nlet x_next = k * x_t * (1 - x_t); // Logistic map calculation\n\n// Define the desired output range\nlet a = 60;   // Lower bound of the output range\nlet b = 100; // Upper bound of the output range\n\n// Normalize the output to stay within the range [a, b]\nlet normalized_output = a + (b - a) * x_next;\n\nmsg.payload = normalized_output;\nreturn msg; // This will be the new scaled value for the resource\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3900,
        "wires": [
            [
                "e965c150e60a0e5d",
                "f4b66092562fa23f"
            ]
        ]
    },
    {
        "id": "0b9f58d4e8399ca2",
        "type": "inject",
        "z": "442506512849cb45",
        "d": true,
        "g": "03e1653057171a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "6",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 3900,
        "wires": [
            [
                "e133eeea0f12fb6a"
            ]
        ]
    },
    {
        "id": "e965c150e60a0e5d",
        "type": "debug",
        "z": "442506512849cb45",
        "g": "03e1653057171a1d",
        "name": "debug 1008",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 3880,
        "wires": []
    },
    {
        "id": "f4b66092562fa23f",
        "type": "link out",
        "z": "442506512849cb45",
        "g": "03e1653057171a1d",
        "name": "chaos",
        "mode": "link",
        "links": [
            "aee7556795a9317f"
        ],
        "x": 715,
        "y": 4000,
        "wires": []
    },
    {
        "id": "e133eeea0f12fb6a",
        "type": "gate",
        "z": "442506512849cb45",
        "g": "03e1653057171a1d",
        "name": "",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 290,
        "y": 3900,
        "wires": [
            [
                "f33e688bcbb3b1c3"
            ]
        ]
    },
    {
        "id": "b3a987b3bf6fb781",
        "type": "ui_switch",
        "z": "442506512849cb45",
        "g": "03e1653057171a1d",
        "name": "",
        "label": "Chaos Gate Control",
        "tooltip": "",
        "group": "6a863a2329b6ce53",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "open",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "close",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 140,
        "y": 4020,
        "wires": [
            [
                "e133eeea0f12fb6a"
            ]
        ]
    },
    {
        "id": "849cc2ad7d7bcc57",
        "type": "link in",
        "z": "442506512849cb45",
        "d": true,
        "g": "03e1653057171a1d",
        "name": "link in 5",
        "links": [
            "55493be88e4b8ab2"
        ],
        "x": 175,
        "y": 3860,
        "wires": [
            [
                "e133eeea0f12fb6a"
            ]
        ]
    },
    {
        "id": "c783136d02b66193",
        "type": "DB2 for i Config",
        "cnnname": "IUGRED_17",
        "db": "*LOCAL",
        "keepalive": true
    },
    {
        "id": "3e86821e0e02d9da",
        "type": "ui_group",
        "name": "Brew Temperature Control",
        "tab": "2215323be190c922",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e207eea38c442aee",
        "type": "ui_group",
        "name": "Water Control",
        "tab": "2215323be190c922",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3a71324c40ab6674",
        "type": "ui_group",
        "name": "Case Production",
        "tab": "2215323be190c922",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "01b5bec2534e4f4a",
        "type": "ui_group",
        "name": "Hopper",
        "tab": "2215323be190c922",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ac1eab09c73ce8f3",
        "type": "ui_group",
        "name": "SWIRL AND MASH",
        "tab": "2215323be190c922",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7a48c29dc27505eb",
        "type": "ui-group",
        "name": "Hopper",
        "page": "59f627896d9c7f78",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "884f6a12d7a70148",
        "type": "ui-group",
        "name": "Water Control",
        "page": "59f627896d9c7f78",
        "width": "6",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "408e6421486ff897",
        "type": "ui-group",
        "name": "Brew Temperature Control",
        "page": "59f627896d9c7f78",
        "width": "6",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "fdd8d859bd63ebe6",
        "type": "ui-base",
        "name": "i-Brew Brewery",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false
    },
    {
        "id": "7fd0c5964823e9f4",
        "type": "ui-group",
        "name": "Case Production",
        "page": "59f627896d9c7f78",
        "width": "6",
        "height": "1",
        "order": 6,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    }
]